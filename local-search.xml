<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机的运算方法</title>
    <link href="/2022/11/16/%E6%95%B0%E7%9A%84%E5%AE%9A%E7%82%B9%E8%A1%A8%E7%A4%BA%E5%92%8C%E6%B5%AE%E7%82%B9%E8%A1%A8%E7%A4%BA/"/>
    <url>/2022/11/16/%E6%95%B0%E7%9A%84%E5%AE%9A%E7%82%B9%E8%A1%A8%E7%A4%BA%E5%92%8C%E6%B5%AE%E7%82%B9%E8%A1%A8%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、数的定点表示和浮点表示"><a href="#一、数的定点表示和浮点表示" class="headerlink" title="一、数的定点表示和浮点表示"></a>一、数的定点表示和浮点表示</h1><h2 id="定点表示："><a href="#定点表示：" class="headerlink" title="定点表示："></a>定点表示：</h2><p>小数点固定在某一位置的数为定点数。</p><h2 id="浮点表示："><a href="#浮点表示：" class="headerlink" title="浮点表示："></a>浮点表示：</h2><p>浮点数就是小数点的位置可以浮动的数，例如：<br>$$<br>352.47 &#x3D; 3.5247 × 10²&#x3D; 3524.7 × 10⁻¹&#x3D; 0.35247 × 10³<br>$$<br>这里的小数点位置虽然改变了，但是因为×了不同的10次幂，所有值的大小并没有改变。</p><p>通常，浮点数被表示成<br>$$<br>N &#x3D; S×r^j<br>$$<br>​公式1</p><p>公式中，S为尾数正负都可，r为基数，j为阶码通过小数点的移动来判断。</p><p>以基数r&#x3D;2为例，数N可写成下列不同的形式：<br>$$<br>\begin{align}<br>N &amp;&#x3D; 11.0101\<br>&amp;&#x3D; 0.110101\times2^{10}\<br>&amp;&#x3D; 1.10101\times2^1\<br>&amp;&#x3D; 1101.01\times2^{-10}\<br>&amp;&#x3D; 0.00110101\times2^{100}<br>\end{align}<br>$$<br>也就是说小数点向左移动x位相当于j为x，小数点向右移动x位，相当于j为-x</p><h3 id="浮点数的表示形式："><a href="#浮点数的表示形式：" class="headerlink" title="浮点数的表示形式："></a>浮点数的表示形式：</h3><p>浮点数在机器中形式如下所示。采用这种数据格式的机器称为浮点机。</p><p>​浮点数由阶码j和尾数s两部分组成。阶码是整数，阶符和阶码的位数m合起来反映浮点数的表示范围及小数点的实际位置；尾数是小数，其位数n反映了浮点数的精度；尾数的符号s代表符号的正负。</p><p>浮点数的表示范围：</p><p>以公式1为例，设浮点数阶码的数值取m位，尾数的数值取n位，当浮点数为非规范化数的时候，他的最大正数为$ 2^{2^m-1}\times(1-2^{-n}) $;最小正数为$ 2^-{2^m-1}\times2^{-n} $;最大负数为－的最小正数，最小负数为-的最大正数。</p><h2 id="定点数和浮点数的比较"><a href="#定点数和浮点数的比较" class="headerlink" title="定点数和浮点数的比较"></a>定点数和浮点数的比较</h2><p>定点数和浮点数可从如下几个方面进行比较</p><p>·当浮点机和定点机中数的位数相同时，浮点数的表示范围比定点数的表示范围大得多。</p><p>·当浮点数为规范化数时，其相对精度远比定点数高。</p><p>·浮点数运算要分阶码部分和尾数部分，而且运算结果都要求规范化，故浮点运算步骤比定点运算步骤多，运算速度比定点运算第，运算线路也复杂。</p><p>·在溢出判断上，浮点数是对规格化数的阶码进行判断，而定点数是对数值本身进行判断。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><img src="https://s2.loli.net/2022/11/15/wc7jmk6YOZoB8IJ.png" alt="image-20221115151110772"></p><p>通过这个例子也可以更好地理解浮点机中浮点数的存储方法。阶码中要有一位存符号，所以一共5位（1个阶符+4个数值位），尾数11位（1个数符+10个数值位）。</p><h1 id="二、定点运算"><a href="#二、定点运算" class="headerlink" title="二、定点运算"></a>二、定点运算</h1><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><p>移位运算对计算机有很大的意义。</p><h3 id="移位规则"><a href="#移位规则" class="headerlink" title="移位规则"></a>移位规则</h3><p>对于正数，由于正数的原码，补码，反码都等于真值，故移位侯出现的空位均填0。但是对于负数由于原码，补码和反码的表示形式不同，故当机器移位时，对其空位的填补规则也不同。</p><p><img src="https://s2.loli.net/2022/11/15/hKXLczZt85Pqku9.png" alt="image-20221115151726230"></p><h3 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h3><p>逻辑移位的规则是：逻辑左移时，高位移丢，低位添0，逻辑右移时，低位移丢，高位添0。</p><h2 id="加法和减法运算"><a href="#加法和减法运算" class="headerlink" title="加法和减法运算"></a>加法和减法运算</h2><p>由于减法相当于加上另一个数的相反数，所以把加法和减法放到一起来讨论。</p><p>补码加法的基本公式如下：<br>$$<br>整数：[A]_补+[B]_补&#x3D;[A+B]_补（mod 2^{n+1}）\<br>小数：[A]_补+[B]_补&#x3D;[A+B]_补（mod 2^{n}）<br>$$<br>同样可得补码减法运算的基本公式：<br>$$<br>整数：[A]_补+[-B]_补&#x3D;[A]_补+[-B]_补(mod2^{n+1})\<br>小数：[A]_补+[-B]_补&#x3D;[A]_补+[-b]_补（mod 2）<br>$$<br>例：</p><p><img src="https://s2.loli.net/2022/11/15/9OAR7wo26dBfyib.png" alt="image-20221115153051347"></p><p>因为取模相当于把最高位的1去掉故$ [A+B]_补&#x3D;0.0110 $结果正确。</p><p><img src="https://s2.loli.net/2022/11/15/DKL3VpnY2BgOblS.png" alt="image-20221115153230967"></p><p>对于最后一个例题还原成真值为118，结果出错，这是因为A-B&#x3D;138超出了机器字长所能表示范围。在计算机中，这种超出机器字长的现象叫溢出。</p><h3 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h3><p>1）用一位符号位判断溢出</p><p>​·对于加法只有在正数+正数，负数+负数的情况下才会溢出，符号不同的两个数相加是不会溢出的。</p><p>​·对于减法只有在正数-负数，负数-正数的情况下才会溢出，符号相同的两个数相减是不会溢出的。</p><p><img src="https://s2.loli.net/2022/11/15/cEJtoBPpzLOA6Zn.png" alt="image-20221115185849895"></p><p>两操作数均为1，结果符号为0，故为溢出。</p><p><img src="https://s2.loli.net/2022/11/15/QIpTDegiUr6VGJ9.png" alt="image-20221115190051732"></p><p>结果的符号同原操作数符号，故未溢出。</p><p>2）用两位符号为判断溢出</p><p>​2位符号位的补码，即变形补码，它是以4为模的，其定义为：<br>$$<br>[x]<em>补&#x3D;<br>\left.<br>    \begin{cases}<br>    x,1&gt;x\ge0\<br>    4+x,0&gt;x\ge-1(mod4)<br>    \end{cases}<br>\right}<br>$$<br>在用变形补码作加法时，2位符号位要连同数值部分一起参加运算，而且高位符号位产生的进位自动丢失，便可以得到正确结果，即<br>$$<br>[x]</em>{补’}+[y]<em>{补’}&#x3D;[x+y]</em>{补’}(mod4)<br>$$<br>变形补码判断溢出的原则是：当2位符号位不同时，表示溢出，否则；无溢出。不论是否发生溢出，高位（第一位）符号位永远代表真正的符号。</p><p><img src="https://s2.loli.net/2022/11/15/M1w9q6rTdAx42Ua.png" alt="image-20221115191427785"></p><p>最后结果两个符号位相同所以没有溢出</p><p><img src="https://s2.loli.net/2022/11/15/g19aN8senIoLkBc.png" alt="image-20221115191454121"></p><p>这个就是溢出的情况。</p><h2 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h2><p>首先先归纳一下乘法运算的过程：</p><p>1）乘法运算可用移位和加法来实现，两个四位数相乘，总共需要进行四次加法运算和四次移位。</p><p>2）由乘数的末位值确定被乘数是否与原部分积相加，然后右移移位，形成新的部分积；同时，乘数也右移一位，由此低位作新的末位，空出最高位放部分积和最低为。</p><p>3）每次做加法时，被乘数仅仅与原部分积的最高位相加，其低位被移至乘数所空出的高位位置。</p><p>​计算机很容易实现这种运算规则。用一个寄存器存放被乘数，一个寄存器存放乘积的高位，另一个寄存器存放乘数及乘积的低位，再配上加法器及其他响应电路，就可组成乘法器。又因加法只在部分积的高位进行，故不但节省了器材，而且还缩短了运算时间。</p><p>接下来一个例题：</p><p><img src="https://s2.loli.net/2022/11/15/Pfdy4HDgpOKsMaI.png" alt="image-20221115192428792"></p><p>乘数A&#x3D;0.1101，乘数B&#x3D;0.1011</p><p>$ A\times B&#x3D; $</p><p>总结一下就是：把新的部分积和乘数放到同一行，除了第一次之外，以后每一次都部分积连同乘数向右移一位，然后看乘数最后一位，如果最后一位为1，那部分积就加乘数A，否则就加0.</p><h3 id="原码乘法："><a href="#原码乘法：" class="headerlink" title="原码乘法："></a>原码乘法：</h3><p>由于原码表示与真值极为相识，只差一个符号，而乘积的符号又可通过两数符号的逻辑异或求得，因此，上述讨论得结果可以直接用于原码一位乘，只需加上符号位处理即可。</p><p>1）原码一位乘运算规则</p><p>以小数为例：</p><p>设<br>$$<br>[x]_原&#x3D;x_0.x_1x_2…x_n\<br>[y]_原&#x3D;y_0.y_1y_2…y_n<br>$$<br>则$ [x]_原\times [y]_原&#x3D;x_0\oplus y_0.(0.x_1x_2…x_n)(0.y_1y_2…y_n) $</p><p>式中，$ 0.x_1x_2…x_n $为x的绝对值，记作$ x^* $;$ 0.y_1y_2…y_n $为y的绝对值，记作$ y^* $。</p><p><img src="https://s2.loli.net/2022/11/15/EASirKRkYb29Wv3.png" alt="image-20221115193737481"></p><p><img src="https://s2.loli.net/2022/11/15/lbsNATM5IVDieqn.png" alt="image-20221115193759824"></p><h3 id="原码两位乘"><a href="#原码两位乘" class="headerlink" title="原码两位乘"></a>原码两位乘</h3><p>为了提高乘法速度，可采用原码两位乘。</p><p>（暂时未学会┭┮﹏┭┮）</p><h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><h4 id="1）恢复余数法"><a href="#1）恢复余数法" class="headerlink" title="1）恢复余数法"></a>1）恢复余数法</h4><p>恢复余数法的特点是：当余数为负时，需加上除数，将其恢复成原来的余数。</p><p>由上所述，商值的确定时通过比较被除数和除数的绝对值大小，即$ [x^*]_补+[y^*]_补 $的操作。</p><p>简单总结一下就是，在求商数之前，先用$ [x^*]_补-[y^*]_补 $的正负来判断这俩的大小关系，若x&gt;y则上商为1否则上商为0，然后再恢复余数即$ +[y^*]_补 $。</p><p>例题：</p><p><img src="https://s2.loli.net/2022/11/16/XkE34uAD9mhwile.png" alt="image-20221116200037633"></p><p><img src="https://s2.loli.net/2022/11/16/EGv4J8bBiO7uaHx.png" alt="image-20221116200047705"></p><h4 id="2）加减交替法"><a href="#2）加减交替法" class="headerlink" title="2）加减交替法"></a>2）加减交替法</h4><p>对于余数交替法来说可总结以下两点：</p><p>·当$ R_i&gt;0 $商为”1“，做$ 2R_i-y^* $的运算</p><p>·当$ R_i&lt;0 $商为”0“，做$ 2R_i+y^* $的运算</p><p>所以这里已经看不出恢复余数的问题了。</p><p>例题：</p><p><img src="https://s2.loli.net/2022/11/16/axvmhelys48C396.png" alt="image-20221116200645916"></p><p><img src="https://s2.loli.net/2022/11/16/ak5Lm9orsQjxEyY.png" alt="image-20221116200654689"></p><h3 id="补码除法"><a href="#补码除法" class="headerlink" title="补码除法"></a>补码除法</h3><p>相比于原码除法来说，补码除法要解决三个问题</p><p>(1)如何确定商值</p><p>(2)如何形成商符</p><p>(3)如何获得新的余数</p><p>首先要想确定商值就必须比较被除数和除数之间的大小关系。</p><table><thead><tr><th>比较$ [x]_补与[y]_补 $的符号</th><th>求余数</th><th>比较$ [R_i]_补与[y]_补 $的符号</th></tr></thead><tbody><tr><td>同号</td><td>$[x]_补-[y]_补$</td><td>同号，表示”够减“</td></tr><tr><td>异号</td><td>$[x]_补+[y]_补$</td><td>异号，表示”够减“</td></tr></tbody></table><p>·商值的确定总的来说就是够减上商为”1“不够减上商为”0“</p><table><thead><tr><th align="left">$[R]_补与[y]_补$</th><th>商值</th></tr></thead><tbody><tr><td align="left">同号</td><td>1</td></tr><tr><td align="left">异号</td><td>0</td></tr></tbody></table><p>同时在补码除法中，商符是在求商的过程中自动形成的。</p><table><thead><tr><th align="left">$[R]_补与[y]_补$</th><th>商值</th><th>新余数$[R_{i+1}]_补$</th></tr></thead><tbody><tr><td align="left">同号</td><td>1</td><td>$[R_{i+1}]_补&#x3D;2[R_i]_补+[-y]_补$</td></tr><tr><td align="left">异号</td><td>0</td><td>$[R_{i+1}]_补&#x3D;2[R_i]_补+[y]_补$</td></tr></tbody></table><p>例题：</p><p><img src="https://s2.loli.net/2022/11/16/tCPhIDqW14wSeVN.png" alt="image-20221116202013913"></p><p><img src="https://s2.loli.net/2022/11/16/wUo5rGgeyYTn6DR.png" alt="image-20221116202028597"></p><p>如果对精度没有特殊要求，一般采用”末位恒置1“的方法，这种方法操作简单，易于实现，而且最大误差仅仅有$ 2^{-n} $。</p><p>同时当$[x]_补与[y]_补$同号的时候$+[-y]_补$得到余数。异号时$+[y]_补$得到余数。</p><p>到此定点运算结束。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>U-Net</title>
    <link href="/2022/11/13/unt/"/>
    <url>/2022/11/13/unt/</url>
    
    <content type="html"><![CDATA[<p>论文阅读：<strong>U-Net: Convolutional Networks for Biomedical</strong></p><p><strong>Image Segmentation</strong></p><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>传统的网络对数据的要求特别多，但是作者提出了一个全新的网络既所谓的“完全卷积网络”，通过扩展这个体系，使得它可以只使用很少的训练图像，产生更精确的分割。</p><p><img src="https://s2.loli.net/2022/11/13/hZ5Qo7epFCnH3la.png" alt="image-20221110212503521"></p><p>作者通过数据增强，来使用少量的数据获得很好的训练效果</p><p>作者使用了一个更好的损失函数（我现在还没看明白）</p><h2 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h2><p><img src="https://s2.loli.net/2022/11/13/jwGlM217qvQaipN.png" alt="image-20221113180133123"></p><h3 id="模型代码"><a href="#模型代码" class="headerlink" title="模型代码:"></a>模型代码:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Conv_Block</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,in_channel,out_channel</span>):<br>        <span class="hljs-built_in">super</span>(Conv_Block, self).__init__()<br>        self.layer=nn.Sequential(<br>            nn.Conv2d(in_channel,out_channel,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>,bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(out_channel),<br>            nn.Dropout2d(<span class="hljs-number">0.3</span>),<br>            nn.LeakyReLU(),<br>            nn.Conv2d(out_channel, out_channel, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>, bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(out_channel),<br>            nn.Dropout2d(<span class="hljs-number">0.3</span>),<br>            nn.LeakyReLU(),<br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-keyword">return</span> self.layer(x)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownSample</span>(nn.Module): <span class="hljs-comment"># 下采样</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,channel</span>):<br>        <span class="hljs-built_in">super</span>(DownSample, self).__init__()<br>        self.layer = nn.Sequential(<br>            nn.Conv2d(channel,channel,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>,bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(channel),<br>            nn.LeakyReLU()<br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-keyword">return</span> self.layer(x)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpSample</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,channel</span>):<br>        <span class="hljs-built_in">super</span>(UpSample, self).__init__()<br>        self.layer = nn.Conv2d(channel,channel//<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x,feature_map</span>):<br>        up = F.interpolate(x,scale_factor=<span class="hljs-number">2</span>,mode=<span class="hljs-string">&#x27;nearest&#x27;</span>)<br>        out = self.layer(up)<br>        <span class="hljs-keyword">return</span> torch.cat((out,feature_map),dim=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UNet</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(UNet,self).__init__()<br>        self.c1 = Conv_Block(<span class="hljs-number">3</span>,<span class="hljs-number">64</span>)<br>        self.d1 = DownSample(<span class="hljs-number">64</span>)<br>        self.c2 = Conv_Block(<span class="hljs-number">64</span>,<span class="hljs-number">128</span>)<br>        self.d2 = DownSample(<span class="hljs-number">128</span>)<br>        self.c3 = Conv_Block(<span class="hljs-number">128</span>,<span class="hljs-number">256</span>)<br>        self.d3 = DownSample(<span class="hljs-number">256</span>)<br>        self.c4 = Conv_Block(<span class="hljs-number">256</span>,<span class="hljs-number">512</span>)<br>        self.d4 = DownSample(<span class="hljs-number">512</span>)<br>        self.c5 = Conv_Block(<span class="hljs-number">512</span>,<span class="hljs-number">1024</span>)<br>        self.u1 = UpSample(<span class="hljs-number">1024</span>)<br>        self.c6 = Conv_Block(<span class="hljs-number">1024</span>,<span class="hljs-number">512</span>)<br>        self.u2 = UpSample(<span class="hljs-number">512</span>)<br>        self.c7 = Conv_Block(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>)<br>        self.u3 = UpSample(<span class="hljs-number">256</span>)<br>        self.c8 = Conv_Block(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>)<br>        self.u4 = UpSample(<span class="hljs-number">128</span>)<br>        self.c9 = Conv_Block(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>)<br>        self.out = nn.Conv2d(<span class="hljs-number">64</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        self.Th = nn.Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        R1 = self.c1(x)<br>        R2 = self.c2(self.d1(R1))<br>        R3 = self.c3(self.d2(R2))<br>        R4 = self.c4(self.d3(R3))<br>        R5 = self.c5(self.d4(R4))<br>        O1 = self.c6(self.u1(R5,R4))<br>        O2 = self.c7(self.u2(O1, R3))<br>        O3 = self.c8(self.u3(O2, R2))<br>        O4 = self.c9(self.u4(O3, R1))<br><br>        <span class="hljs-keyword">return</span> self.Th(self.out(O4))<br><br><span class="hljs-comment"># 测试代码</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    x = torch.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">256</span>,<span class="hljs-number">256</span>)<br>    <span class="hljs-built_in">print</span>(x)<br>    net = UNet()<br>    <span class="hljs-built_in">print</span>(net(x))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>paper read</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总线控制</title>
    <link href="/2022/11/09/3.5%E6%80%BB%E7%BA%BF%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/11/09/3.5%E6%80%BB%E7%BA%BF%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="3-5总线控制"><a href="#3-5总线控制" class="headerlink" title="3.5总线控制"></a>3.5总线控制</h1><p>一、总线判优控制</p><p>1基本概念：</p><p>​主设备：对总线有控制权</p><p>​从设备：响应从主设备发来的总线请求</p><p>总线判优控制：</p><p>​集中式</p><p>​链式查询</p><p>​<img src="https://s2.loli.net/2022/11/13/lSnCTsiRQVDIqB4.png" alt="image-20221108211241875"></p><p>BG从io接口0向后查询，离BG最近的先占用</p><p>特点：只需要很少的几根线就能按一优先次序实现总线控制，并且很容易扩充设备</p><p>缺点：对电路故障很敏感，而且优先级别低的设备可能很难获得请求。</p><p>​计数器定时查询</p><p><img src="https://s2.loli.net/2022/11/13/Z2qbeFuyTQliwBD.png" alt="image-20221108212811335"></p><p>​优点：计数器的初始值还可以由程序设置，故优先次序可以改变。</p><p>​缺点：这种方式对电路故障不如链式查询方式敏感，但是增加了控制线，变得更复杂</p><p>​n个设备至少需要log2^n根线</p><p>​独立请求方式</p><p><img src="https://s2.loli.net/2022/11/13/2htuLa7dzxT3qjF.png" alt="image-20221108213318580"></p><p>​优点：响应速度快，优先次序控制灵活</p><p>​缺点：控制线数量很多，总线控制更复杂</p><p>​n个设备需求2n条线。</p><p>​分布式</p><p>二、总线通信控制：</p><p>1）目的 解决通信双方协调配合问题</p><p>2）总线传输周期</p><p>​申请分配阶段：主模块申请，总线仲裁决定</p><p>​寻址阶段：主模块向从设备给出地址和命令</p><p>​传数阶段：主模块和从模块交换数据</p><p>​结束阶段：主模块撤销有关信息</p><p>3）总线通信的四种方式：</p><p>​同步通信：由统一时标控制数据传送</p><p>在固定的时间点给出固定的操作</p><p>T1上升沿必须给出地址信号，在第二个时钟周期上升沿必须给出读命令信号，第三个时钟周期上升沿到达之前，从设备必须要给出数据信号。第四个时钟周期上升沿可以进行撤销操作。</p><p>菱形代表开始写地址写数据，</p><p><img src="https://s2.loli.net/2022/11/13/NCWLc2awndvkem4.png" alt="image-20221108214325696"></p><p>在同步通信中要求总线较短</p><p>因为需要统一时标；总线长，需要迁就最远的设备；读写时间差距大，需要迁就最慢的设备</p><p>​异步通信：采用应答方式，没有公共时钟标准</p><p>​<img src="https://s2.loli.net/2022/11/13/9HpAboCSOmWVRUl.png" alt="image-20221108215130120"></p><p>不互锁，只需要保证从设备结束到请求</p><p>半互锁，在不互锁的基础上要保证主设备接受到从设备发出的请求才能撤销信号</p><p>全互锁，在半互锁的基础上，要保证从设备接受到主设备撤销请求的信号之后，从设备才能撤销信号。</p><p>半同步通信：同步、异步结合</p><p>同步：发送方用系统时钟前沿发信号</p><p>​接收方用系统时钟后沿判断、识别</p><p>异步：允许不同速度的模块和谐工作</p><p>​增加一条“等待”响应信号</p><p>以输入数据为例的半同步通信时序</p><p>​主模块发地址</p><p>​主模块发命令</p><p>​当wait为低电平时，等待一个T</p><p>​当wait为低电平时，等待一个t</p><p>​从模块提供数据，主模块撤销读命令，从模块撤销数据。</p><p><img src="https://s2.loli.net/2022/11/13/1lIcWyBUYPk3mQ5.png" alt="image-20221109204307184"></p><p>上诉三种通信的共同点：</p><p>​一个总线传输周期（以输入数据为例）</p><p>​主模块发地址、命令 占用总系</p><p>​从模块准备数据  不占用总线 总线空闲</p><p>​从模块向主模块发数据 占用总线</p><p>​分离式通信：充分挖掘系统总线每个瞬间的最大潜力</p><p>一个总线传输周期</p><p>子周期1：主模块申请占用总线，使用完后即放弃总线的使用权</p><p>子周期2：从模块申请占用总线，将各种信息传送至总线</p><p>分离式通信的特点：</p><p>①各模块有权申请占用总线</p><p>②采用同步方式通信，不等待对方回答</p><p>③各模块准备数据，不占用总线</p><p>④总线杯占用时，无空闲。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day17 -- 异常处理</title>
    <link href="/2022/07/19/day17%20--%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2022/07/19/day17%20--%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="day17-–-异常处理"><a href="#day17-–-异常处理" class="headerlink" title="day17 – 异常处理"></a>day17 – 异常处理</h1><h2 id="异常概述与异常体系结构"><a href="#异常概述与异常体系结构" class="headerlink" title="异常概述与异常体系结构"></a>异常概述与异常体系结构</h2><h3 id="java虚拟机无法解决的严重问题："><a href="#java虚拟机无法解决的严重问题：" class="headerlink" title="java虚拟机无法解决的严重问题："></a>java虚拟机无法解决的严重问题：</h3><p>​栈溢出：java.lang.StackOverflowError</p><p>​堆溢出：java.lang.OutOfMemoryError: Java heap space</p><h3 id="异常的体系结构："><a href="#异常的体系结构：" class="headerlink" title="异常的体系结构："></a>异常的体系结构：</h3><p>​java.lang.Throwable</p><p>​java.lang.Error:一般不处理</p><p>​java.lang.Exception:可以进行异常处理</p><p>​面试题：常见的异常都有哪些？举例说明</p><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><h2 id="异常处理机制一"><a href="#异常处理机制一" class="headerlink" title="异常处理机制一"></a>异常处理机制一</h2><h3 id="抓抛模型："><a href="#抓抛模型：" class="headerlink" title="抓抛模型："></a>抓抛模型：</h3><p>​过程一“抛”：程序在正常执行的过程中，一旦出现异常，就会在出现异常的地方生成一个对应的异常类</p><p>​并把此对象抛出。一旦抛出对象以后，其后的代码就不再执行了</p><p>​关于异常对象的产生：系统自动生成的，</p><p>​手动生成一个异常对象，并抛出</p><p>​过程二“抓”：可以理解为异常的处理方式1.try-catch-finally 2.thorws</p><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//可能出现异常的代码</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">1</span> 变量名<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">//异常处理方式1</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">2</span> 变量名<span class="hljs-number">2</span>)&#123;<br><span class="hljs-comment">//异常处理方式2</span><br>&#125;<br>……<br><span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//一定会执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>​finally是可选的</p><p>​使用try将可能出现异常的代码包装起来，一旦出现异常就生成一个异常类，根据异常类去catch匹配</p><p>​一旦匹配完就会跳出catch继续执行其后的代码</p><p>​catch中异常类如果没有子父类关系，顺序无所谓</p><p>​常用的异常对象处理方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span><br>printStackTrace()<br></code></pre></td></tr></table></figure><p>​在try中声明的结构出了try就不能在调用了</p><h5 id="体会1："><a href="#体会1：" class="headerlink" title="体会1："></a>体会1：</h5><p>​使用try-catch-finally处理编译异常，编译时不报错，运行时依然报错</p><h5 id="体会2："><a href="#体会2：" class="headerlink" title="体会2："></a>体会2：</h5><h5 id="开发中，由于运行中异常比较常见，所有我们通常不针对运行时异常编写了。"><a href="#开发中，由于运行中异常比较常见，所有我们通常不针对运行时异常编写了。" class="headerlink" title="开发中，由于运行中异常比较常见，所有我们通常不针对运行时异常编写了。"></a>开发中，由于运行中异常比较常见，所有我们通常不针对运行时异常编写了。</h5><h4 id="finally的使用"><a href="#finally的使用" class="headerlink" title="finally的使用"></a>finally的使用</h4><p>​finally是可选的</p><p>​finally是一定会被执行的</p><p>​jvm不能自动回收的需要我们手动回收的需要写道finally中</p><h2 id="异常处理机制二"><a href="#异常处理机制二" class="headerlink" title="异常处理机制二"></a>异常处理机制二</h2><h3 id="throws："><a href="#throws：" class="headerlink" title="throws："></a>throws：</h3><p>​throws + 异常类型</p><p>​指明此方法执行时，可能会抛出的异常类型</p><p>​一旦方法题执行时，出现异常的时候会生成一个异常类的对象，若异常类的对象满足异常类型，就会抛出。异常代码后面的就不会执行了</p><h4 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h4><p>​throws的方法只是将异常抛给方法的调用者，并没有将异常处理掉</p><h4 id="方法重写的规则之一："><a href="#方法重写的规则之一：" class="headerlink" title="方法重写的规则之一："></a>方法重写的规则之一：</h4><p>​子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><h4 id="开发中如何选择："><a href="#开发中如何选择：" class="headerlink" title="开发中如何选择："></a>开发中如何选择：</h4><p>​如果父类中被重写的方法中没有使用throws，则子类也不能用，就必须使用try-catch-finally</p><p>​执行的方法中，先后调用了另一个方法，这几个方法也是递进的关系，建议用throws进行处理，</p><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            s.regist(-<span class="hljs-number">1001</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(s);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(s);</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">// 手动抛出一个异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span>(id &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">this</span>.id = id;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的数据非法&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;您输入的数据非法&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h2><h3 id="如何自定义异常类"><a href="#如何自定义异常类" class="headerlink" title="如何自定义异常类"></a>如何自定义异常类</h3><p>​继承现有的异常结构</p><p>​提供全局常量：serialVersionUID3</p><p>​提供重载的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            s.regist(-<span class="hljs-number">1001</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(s);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(s);</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">// 手动抛出一个异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span>(id &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">this</span>.id = id;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;不能输入负数&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day15 -- 关键字：</title>
    <link href="/2022/07/19/day15%20--%20%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9A/"/>
    <url>/2022/07/19/day15%20--%20%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="day15-–-关键字："><a href="#day15-–-关键字：" class="headerlink" title="day15 – 关键字："></a>day15 – 关键字：</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* static关键字的使用：</span><br><span class="hljs-comment">* 静态的</span><br><span class="hljs-comment">* 可以用来修饰：属性，方法，代码块，内部类</span><br><span class="hljs-comment">* static修饰属性：静态变量</span><br><span class="hljs-comment">*   属性：按是否使用static修饰分为静态属性和非静态属性(实例变量)</span><br><span class="hljs-comment">*        实例变量：我们创建多个类的对象，每个对象都有一套类中非静态的属性。其中当修改一个对象中的非静态属性时，</span><br><span class="hljs-comment">*                   不会导致其他对象属性值的修改</span><br><span class="hljs-comment">*        静态变量：我们创建了多个类的对象，多个对象共享同一个静态变量。当通过每一个对象修改静态变量时，会导致其他</span><br><span class="hljs-comment">*                   对象调用此静态变量时，是修改过的</span><br><span class="hljs-comment">*   static修饰属性的其他说明：</span><br><span class="hljs-comment">*       静态变量随着类的加载而加载。可以通过&quot;类.静态变量&quot;</span><br><span class="hljs-comment">*       静态变量的加载要早于对象的创建。</span><br><span class="hljs-comment">*       由于类只会加载一次，则静态变量在内存中只存在一份：存在方法区的静态域中。</span><br><span class="hljs-comment">*           类变量     实例变量</span><br><span class="hljs-comment">*       类   yes         no</span><br><span class="hljs-comment">*       对象  yes         yes</span><br><span class="hljs-comment">*   静态属性举例：System.out.println</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*   static注意点：</span><br><span class="hljs-comment">*       在静态的方法中，不能使用this关键字，super关键字</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 开发中如何确定一个属性加static</span><br><span class="hljs-comment">*   属性可以被多个属性所共享的，不会随着对象不同而不同的。</span><br><span class="hljs-comment">* 开发中如何确定一个方法加static</span><br><span class="hljs-comment">*   操作静态属性的方法通常设为static</span><br><span class="hljs-comment">*   工具类中的方法，习惯上声明为static的。比如、Math</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* static修饰方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br>        c1.name = <span class="hljs-string">&quot;姚明&quot;</span>;<br>        c1.age = <span class="hljs-number">44</span>;<br>        c1.nation = <span class="hljs-string">&quot;CHN&quot;</span>;<br><br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br>        c2.name = <span class="hljs-string">&quot;马龙&quot;</span>;<br>        c2.age = <span class="hljs-number">39</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">static</span> String nation;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 单例设计模式：</span><br><span class="hljs-comment">*   对某个类只能存在一个对象实例</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*   如何实现</span><br><span class="hljs-comment">*       饿汉式</span><br><span class="hljs-comment">*       懒汉式</span><br><span class="hljs-comment">* 区分：</span><br><span class="hljs-comment">*   饿汉式：</span><br><span class="hljs-comment">*       坏处：对象加载时间过长。</span><br><span class="hljs-comment">*       好处：饿汉式是线程安全的</span><br><span class="hljs-comment">*   懒汉式：</span><br><span class="hljs-comment">*       好处：延迟创建对象</span><br><span class="hljs-comment">*       坏处：线程不安全--&gt;到多线程内容时，再修改</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonTest</span> &#123;<br><br>&#125;<br><br><span class="hljs-comment">//饿汉式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bank</span>&#123;<br>    <span class="hljs-comment">//私有化构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Bank</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//内部创建类的对象</span><br>    <span class="hljs-comment">//要求此对象也必须声明为静态的</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-type">Bank</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bank</span>();<br><br>    <span class="hljs-comment">//提供公共的静态的方法，返回类的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bank <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//懒汉式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span>&#123;<br>    <span class="hljs-comment">//私有化类的构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Order</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//声明当前类的对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Order</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//声明public、static的返回当前类的对象的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Order <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main方法的使用说明"><a href="#main方法的使用说明" class="headerlink" title="main方法的使用说明"></a>main方法的使用说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* main方法的使用说明</span><br><span class="hljs-comment">*   main()方法作为程序的入口</span><br><span class="hljs-comment">*   main()方法也是一个普通的静态方法</span><br><span class="hljs-comment">*   main()方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">100</span>];<br>        MainDemo.main(<span class="hljs-string">&quot;123&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; args.length;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;****&quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>​代码块作用：用来初始化类、对象</p><p>​代码块如果有修饰的话只能用static</p><p>​分类：静态代码块 vs 非静态代码块</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>​内部可以用输出语句</p><p>​随着类的加载而执行而且只执行一次</p><p>​作用：初始化类的信息</p><h3 id="非静态代码块"><a href="#非静态代码块" class="headerlink" title="非静态代码块"></a>非静态代码块</h3><p>​内部可以用输出语句</p><p>​随着对象的创建而执行</p><p>​每创建一个对象，就执行一次非静态代码块</p><p>​作用：可以在创建对象时，对对象属性进行初始化</p><h4 id="对象可以赋值的位置："><a href="#对象可以赋值的位置：" class="headerlink" title="对象可以赋值的位置："></a>对象可以赋值的位置：</h4><p>默认初始</p><p>显式初始化</p><p>构造器初始化</p><p>代码块初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09--面向对象</title>
    <link href="/2022/07/19/day09--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/07/19/day09--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="day09–面向对象"><a href="#day09–面向对象" class="headerlink" title="day09–面向对象"></a>day09–面向对象</h1><h2 id="面向对象的思想概述"><a href="#面向对象的思想概述" class="headerlink" title="面向对象的思想概述"></a>面向对象的思想概述</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> InstanceTest;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 理解&quot;万事万物皆对象&quot;</span><br><span class="hljs-comment">*   在java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</span><br><span class="hljs-comment">*       Scanner、String等</span><br><span class="hljs-comment">*   涉及到java语言与前端html、后端的数据库交互时，前后的结构在java层面交互时，都体现为类、对象</span><br><span class="hljs-comment">* 内存解析的说明</span><br><span class="hljs-comment">*   引用类型的变量，值可能存储两类值，null或地址值</span><br><span class="hljs-comment">* 匿名对象的使用</span><br><span class="hljs-comment">*   创建的对象，没有显式的给一个变量名</span><br><span class="hljs-comment">*   匿名对象我们只能调用一次</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><span class="hljs-comment">//        p.playGame();</span><br><span class="hljs-comment">//        p.sendEmail();</span><br><br>        <span class="hljs-comment">//匿名对象</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().playGame();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().sendEmail();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().price = <span class="hljs-number">1999</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().showPrice();<br><br>        <span class="hljs-comment">//*************************</span><br>        <span class="hljs-type">PhoneMall</span> <span class="hljs-variable">mall</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneMall</span>();<br>        <span class="hljs-comment">// mall.show();</span><br>        <span class="hljs-comment">//匿名对象的使用</span><br>        mall.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneMall</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Phone phone)</span>&#123;<br>        phone.sendEmail();<br>        phone.playGame();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmail</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送邮件&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;玩游戏&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showPrice</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;手机的价格为&quot;</span> + price);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MethondArgs;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 可变形参的方法</span><br><span class="hljs-comment">*   具体使用：</span><br><span class="hljs-comment">*       可变格式的格式 数据类型 ... 数据名</span><br><span class="hljs-comment">*       当调用可变个数形参的方法时，传入参数的个数可以是一个或多个</span><br><span class="hljs-comment">*       可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</span><br><span class="hljs-comment">*       可变个数形参的方法与本类中方法名相同，形参类型也相同的数组中不构成重载</span><br><span class="hljs-comment">*       可变个数形参在方法的形参中，必须声明在末尾</span><br><span class="hljs-comment">*       只能声明一个可变形参</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodArgsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">MethodArgsTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodArgsTest</span>();<br>        test.show(<span class="hljs-number">12</span>);<br>        test.show(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String s)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String ... strs)</span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;show(String ... strs)&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; strs.length;i++)&#123;<br>            System.out.println(strs[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Map</title>
    <link href="/2022/07/17/Map/"/>
    <url>/2022/07/17/Map/</url>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p> HashMap：作为Map的主要实现类：线程不安全的，效率高；存储null的key和value</p><p>​LinkedHashMap:保证在遍历map元素的时候，可以按照添加的顺序实现遍历</p><p>​原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素，对于频繁的遍历操作，此类执行效率高于HashMap</p><p>​TreeMap：按照排序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> User)&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) o;<br>            <span class="hljs-keyword">return</span> Integer.compare(<span class="hljs-built_in">this</span>.age,u.age);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入异常！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HashMap的底层：数组+链表+红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java2;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">456</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">156</span>);<br>        System.out.println(map);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map1.put(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-number">456</span>);<br>        map.putAll(map1);<br>        System.out.println(map);<br>        <span class="hljs-comment">//remove</span><br>        <span class="hljs-comment">//clear</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">456</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">156</span>);<br>        <span class="hljs-comment">//get</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;AA&quot;</span>));<br>        <span class="hljs-comment">//containKey</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;AA&quot;</span>));<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">456</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">156</span>);<br><br>        <span class="hljs-comment">//遍历key集</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br>        <span class="hljs-comment">//遍历value集</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        <span class="hljs-keyword">for</span>(Object obj:values)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//遍历key-value</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entryset</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> entryset.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (Map.Entry) obj;<br>            System.out.println(e.getKey() + <span class="hljs-string">&quot;------&gt;&quot;</span> + e.getValue());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Hashtable：作为古老的实现类，线程安全的，效率低，不能存储null的key和value</p><p>​Properties：常用来处理配置文件。key和value都是String类型</p><p>Map中定义的方法</p><p>Collections工具类</p><p>操作collection和map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java2;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">4</span>);<br>        list.add(<span class="hljs-number">5</span>);<br>        list.add(<span class="hljs-number">6</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//反转</span><br>        Collections.reverse(list);<br>        System.out.println(list);<br>        <span class="hljs-comment">//随机化</span><br>        Collections.shuffle(list);<br>        System.out.println(list);<br>        <span class="hljs-comment">//排序</span><br>        Collections.sort(list);<br>        System.out.println(list);<br>        <span class="hljs-comment">//交换</span><br>        Collections.swap(list,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//计数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Collections.frequency(list,<span class="hljs-number">1</span>);<br>        System.out.println(a);<br>        <span class="hljs-comment">//复制</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[list.size()]);<br>        Collections.copy(dest,list);<br>        System.out.println(dest);<br><br>        <span class="hljs-comment">//线程安全</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Collections.synchronizedList(list);<br>        System.out.println(list1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day20--常用类</title>
    <link href="/2022/07/14/java%20%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/07/14/java%20%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="java-常用类"><a href="#java-常用类" class="headerlink" title="java 常用类"></a>java 常用类</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>​String声明为final，不可以被继承</p><p>​String实现了Seriablizable接口：表示字符串是支撑序列化的</p><p>​实现了Comparable：表示String可以比较大小</p><p>​String内部定义类fianl char[] value用于存储字符串数据</p><p>​String代表不可变的字符串序列。简称：不可变性</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> leng<br></code></pre></td></tr></table></figure><p>SimpleDateFormat的使用，SimpleDateFormat对日期Date类的格式化和解析</p><p>两个操作</p><h2 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        String[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;cc&quot;</span>,<span class="hljs-string">&quot;kk&quot;</span>,<span class="hljs-string">&quot;mm&quot;</span>,<span class="hljs-string">&quot;gg&quot;</span>,<span class="hljs-string">&quot;jj&quot;</span>,<span class="hljs-string">&quot;dd&quot;</span>&#125;;<br><br>        Arrays.sort(arr1);<br>        System.out.println(Arrays.toString(arr1));<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">4</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;lianxiangmous&quot;</span>,<span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;dell&quot;</span>,<span class="hljs-number">32</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;huawei&quot;</span>,<span class="hljs-number">31</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;xiaomi&quot;</span>,<span class="hljs-number">10</span>);<br><br>        Arrays.sort(arr);<br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Goods</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Goods</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-comment">//按照价格从低到高排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>            <span class="hljs-type">Goods</span> <span class="hljs-variable">goods</span> <span class="hljs-operator">=</span> (Goods) o;<br>            <span class="hljs-comment">//方式一</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.price &gt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.price &lt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">//方式二</span><br><span class="hljs-comment">//            return Double.compare(this.price,goods.price);</span><br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的商品类型不一致&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day19--多线程</title>
    <link href="/2022/07/13/dayxx%20--%20%E5%A4%9A%E7%BA%BF%E7%A8%8B++/"/>
    <url>/2022/07/13/dayxx%20--%20%E5%A4%9A%E7%BA%BF%E7%A8%8B++/</url>
    
    <content type="html"><![CDATA[<h1 id="dayxx-–-多线程"><a href="#dayxx-–-多线程" class="headerlink" title="dayxx – 多线程"></a>dayxx – 多线程</h1><h2 id="线程的声明周期"><a href="#线程的声明周期" class="headerlink" title="线程的声明周期"></a>线程的声明周期</h2><p>​新建–&gt;就绪–&gt;运行(阻塞–&gt;就绪)–&gt;死亡</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​卖票过程中出现重票和错票</p><h2 id="问题出现的原因"><a href="#问题出现的原因" class="headerlink" title="问题出现的原因"></a>问题出现的原因</h2><p>​当某个线程操作未完成时候，另一个线程进来了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>​当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket</p><p>​在java中，通过同步机制，来解决线程安全问题</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​同步代码块</p><p>​</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(同步监视器)</span></span>&#123;<br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明：操作共享数据的代码，就是需要被同步的代码</span><br><span class="hljs-comment">共享数据</span><br><span class="hljs-comment">同步监视器，俗称锁。任何一个对象都可以是锁</span><br><span class="hljs-comment">要求：多个线程必须共用同一把锁</span><br><span class="hljs-comment">在继承Thread类创建多线程慎用this来做锁</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​同步方法</p><p>​解决了线程安全问题</p><p>​操作同步代码时，只能有一个线程参与</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>​</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>​不同的资源占用对方需要的资源不放弃</p>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day18--多线程</title>
    <link href="/2022/07/11/dayxx%20--%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/07/11/dayxx%20--%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="dayxx-–-多线程"><a href="#dayxx-–-多线程" class="headerlink" title="dayxx – 多线程"></a>dayxx – 多线程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>是为完成特点任务、用某种语言编写的一组指令的集合。即一段静态的代码</p><p>进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><p>若一个进程同一时间并行执行多个线程，就是支持多线程</p><h3 id="多线程的优点"><a href="#多线程的优点" class="headerlink" title="多线程的优点"></a>多线程的优点</h3><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>​以单核CPU为例，只使用单个线程先后完成多个任务，方法肯定比用多个线程来完成用的时间更短，为何有需要多线程</p><p>​提高应用程序的响应，对图形化界面更有意义，可增强用户体验</p><p>​提高计算机系统CPU的利用率</p><p>​改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p><h3 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h3><p>​程序需要同时执行两个或多个任务。</p><p>​程序需要实现一些需要等待的任务时</p><p>​需要一些后天运行的程序时</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>​通过java.lang.Thread：来实现</p><p>​①声明一个Thread的子类</p><p>​创建Thread的子类</p><p>​创建Thread类的子类的对象</p><p>​重写run方法</p><p>​通过此对象调用start()</p><p>​不能直接调用run</p><p>​yield()释放当前cpu的执行权</p><p>​② 创建多线程的方法二，实现Runnable接口</p><p>​实现类去实现Runnable中的抽象方法run()</p><p>​创建类的对象</p><p>​将此对象作为参数传递到Thread中，创建Thread的对象</p><p>​通过Threa的对象调用start()</p><h3 id="比较两种创建线程的方式："><a href="#比较两种创建线程的方式：" class="headerlink" title="比较两种创建线程的方式："></a>比较两种创建线程的方式：</h3><p>​开发中优先选择第二种</p><h3 id="线程的调度："><a href="#线程的调度：" class="headerlink" title="线程的调度："></a>线程的调度：</h3><p>​</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MAX_PRIORITY</span>:<span class="hljs-number">10</span><br><span class="hljs-attribute">MIN_PRIORITY</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">NORM_PRIORITY</span>:<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>​获取当前线程的优先级</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day16 -- 内部类</title>
    <link href="/2022/07/08/day16%20--%20%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2022/07/08/day16%20--%20%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="day16-–-内部类"><a href="#day16-–-内部类" class="headerlink" title="day16 – 内部类"></a>day16 – 内部类</h1><h2 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h2><p>有时候把一个父类设计的特别抽象，以至于它没有具体的实例，这样的类叫抽象类</p><h2 id="abstract关键字的使用："><a href="#abstract关键字的使用：" class="headerlink" title="abstract关键字的使用："></a>abstract关键字的使用：</h2><p>​abstract可以用来修饰的结构：类、方法</p><p>​此类不能实例化</p><p>​抽象类中一定有构造器，便于子类对象实例化时调用（涉及：子类对象实例化的全过程）</p><p>​开发中，都会提供抽象类的子类.</p><h2 id="abstract修饰方法"><a href="#abstract修饰方法" class="headerlink" title="abstract修饰方法"></a>abstract修饰方法</h2><p>​抽象方法只有方法的声明，没有方法体</p><p>​包含抽象方法的类，一定是一个抽象类，反正抽象类中是可以没有抽象方法的</p><p>​若子类重写了父类中所有的抽象方法后，此子类方可实例化</p><p>​若子类没有重写父类中的抽象方法，则此子类也是一个抽象类</p><h2 id="abstract使用的注意点："><a href="#abstract使用的注意点：" class="headerlink" title="abstract使用的注意点："></a>abstract使用的注意点：</h2><p>​abstract不能用来修饰：属性、构造器等结构</p><p>​abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;吃肉啊&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;走路啊&quot;</span>);<br>                &#125;<br>            &#125;;<br>            p.eat();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人走路&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类的匿名子类："><a href="#抽象类的匿名子类：" class="headerlink" title="抽象类的匿名子类："></a>抽象类的匿名子类：</h2><h3 id="多态的应用：模板方法设计模式"><a href="#多态的应用：模板方法设计模式" class="headerlink" title="多态的应用：模板方法设计模式"></a>多态的应用：模板方法设计模式</h3><p>​抽象类的应用：模板方法的设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HourlyEnployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> wage;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hour;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HourlyEnployee</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> number, MyDate birthday, <span class="hljs-type">int</span> wage, <span class="hljs-type">int</span> hour)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, number, birthday);<br>        <span class="hljs-built_in">this</span>.wage = wage;<br>        <span class="hljs-built_in">this</span>.hour = hour;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">earnings</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wage * <span class="hljs-built_in">this</span>.hour;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">private</span> MyDate birthday;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">earnings</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> number, MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.number = number;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> MyDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, number=&quot;</span> + number +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<br>        <span class="hljs-built_in">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDay</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toDateString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalariedEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> monteSalary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalariedEmployee</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> number, MyDate birthday, <span class="hljs-type">int</span> monteSalary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, number, birthday);<br>        <span class="hljs-built_in">this</span>.monteSalary = monteSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">earnings</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getBirthday().getMonth() == m)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.monteSalary + <span class="hljs-number">100</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.monteSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonteSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> monteSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonteSalary</span><span class="hljs-params">(<span class="hljs-type">int</span> monteSalary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.monteSalary = monteSalary;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h2><p>通过接口可以实现多重继承</p><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><p>​接口使用interface来定义</p><p>​java中接口和类是并列的两个结构</p><p>​如何定义接口</p><p>​接口不能定义构造器！意味着接口不可以实例化</p><h3 id="java开发中，接口通过让类去实现的方式来使用"><a href="#java开发中，接口通过让类去实现的方式来使用" class="headerlink" title="java开发中，接口通过让类去实现的方式来使用"></a>java开发中，接口通过让类去实现的方式来使用</h3><p>​如果实现了覆盖率接口中所有抽象方法，则此实现类就可以实例化</p><p>​如果实现类没有覆盖接口中所有抽象方法，则此实现类仍为一个抽象类</p><h3 id="java类可以实现多个接口-–-gt-弥补了java单继承性的局限性"><a href="#java类可以实现多个接口-–-gt-弥补了java单继承性的局限性" class="headerlink" title="java类可以实现多个接口 –&gt; 弥补了java单继承性的局限性"></a>java类可以实现多个接口 –&gt; 弥补了java单继承性的局限性</h3><p>​格式 class A extends B implement CC,DD,EE</p><p>​接口和接口之间可以继承，而且可以多继承</p><p>​接口的具体使用，体现多态性</p><p>​接口，实际上可以看成一种规范</p><p>​面试题：抽象类与接口有哪些异同</p><h2 id="接口的使用："><a href="#接口的使用：" class="headerlink" title="接口的使用："></a>接口的使用：</h2><p>​接口的多态性</p><p>​接口实际上就定义了一种规范</p><p>开发中，体会面向接口编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsbTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建接口的非匿名实现类的非匿名对象</span><br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        <span class="hljs-type">Flash</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flash</span>();<br>        c.transferData(usb);<br><br>        <span class="hljs-comment">//创建接口的非匿名实现类的对象</span><br>        c.transferData(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flash</span>());<br><br>        <span class="hljs-comment">// 创建了接口的匿名实现对象的非匿名对象</span><br>         <span class="hljs-type">USB</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>() &#123;<br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>                 System.out.println(<span class="hljs-string">&quot;手机开始工作&quot;</span>);<br>             &#125;<br><br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;手机停止工作&quot;</span>);<br>             &#125;<br>         &#125;;<br>         c.transferData(phone);<br><br>         <span class="hljs-comment">//创建了接口的匿名实现类的匿名对象</span><br>        c.transferData(<span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;mp3开始工作&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;mp3停止工作&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flash</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;U盘启动&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;U盘关闭&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transferData</span><span class="hljs-params">(USB usb)</span>&#123;<br>            usb.start();<br>            System.out.println(<span class="hljs-string">&quot;具体数据传输的细节&quot;</span>);<br>            usb.stop();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口的应用："><a href="#接口的应用：" class="headerlink" title="接口的应用："></a>接口的应用：</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetWorkTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>();<br><span class="hljs-comment">//        new ProxyServer(server);</span><br><br>        <span class="hljs-type">ProxyServer</span> <span class="hljs-variable">proxyserver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyServer</span>(server);<br>        proxyserver.browse();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NetWork</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">browse</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//被代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NetWork</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">browse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;真实服务器访问网络&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NetWork</span>&#123;<br>    <span class="hljs-keyword">private</span> NetWork work;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyServer</span><span class="hljs-params">(NetWork work)</span> &#123;<br>        <span class="hljs-built_in">this</span>.work = work;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;联网之前检查工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">browse</span><span class="hljs-params">()</span> &#123;<br>        check();<br><br>        work.browse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>​实现了创建者与调用者的分离，即创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</p><h2 id="java8中接口的新特性"><a href="#java8中接口的新特性" class="headerlink" title="java8中接口的新特性"></a>java8中接口的新特性</h2><p>​jdk8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</p><p>​接口中定义的静态发放只能通过接口调用</p><p>​通过类的对象，可以调用接口中默认的方法</p><p>​如果实现类重写了接口中的默认方法，调用时，仍然是重写的方法</p><p>​如果子类继承的父类中声明了和接口中同名同参数的方法，默认的调用的父类的方法–&gt;类优先原则</p><p>​如果实现类实现了多个接口，而这个接口定义了同名同参数的多个方法，报错–&gt;接口冲突</p><p>​这就必须重写</p><h3 id="如何在子类的方法中调用被重写的方法"><a href="#如何在子类的方法中调用被重写的方法" class="headerlink" title="如何在子类的方法中调用被重写的方法"></a>如何在子类的方法中调用被重写的方法</h3><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CompareA.<span class="hljs-built_in">super</span>.method3();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompareA</span> &#123;<br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CompareA:北京&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//默认方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CompareA:上海&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CompareA:上海&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompareB</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methond3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CompareB:&quot;</span><span class="hljs-string">&quot;上海&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubclassTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Subclass</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subclass</span>();<br><br>        CompareA.method1();<br>        s.method2();<br>        s.method3();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subclass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SupperClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CompareA</span>,CompareB&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部类："><a href="#内部类：" class="headerlink" title="内部类："></a>内部类：</h2><p>​java中允许把一个类A声明在类B中，则A是内部类，B是外部类</p><p>​内部类的分类，成员内部类 vs 局部内部类（方法内、代码块内）</p><h3 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h3><h4 id="一方面，作为外部类的成员："><a href="#一方面，作为外部类的成员：" class="headerlink" title="一方面，作为外部类的成员："></a>一方面，作为外部类的成员：</h4><p>​调用外部类的结构</p><p>​可以被static修饰</p><p>​可以被四种不同的权限修饰</p><h4 id="另一方面，作为一个类："><a href="#另一方面，作为一个类：" class="headerlink" title="另一方面，作为一个类："></a>另一方面，作为一个类：</h4><p>​类内可以定义属性、方法、构造器</p><p>​可以被final修饰，表示此类不能被继承了。言外之意不修饰可以被继承</p><p>​可以被abstract修饰</p><h3 id="关注如下三个问题："><a href="#关注如下三个问题：" class="headerlink" title="关注如下三个问题："></a>关注如下三个问题：</h3><p>​如何实例化成员内部类的对象</p><p>​如何再乘以内部类中区分调用外部类的结构</p><p>​开发中局部内部类的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.java2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Person.<span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>.Dog();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        Person.<span class="hljs-type">Bird</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> p.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-comment">//静态成员内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>&#123;<br>        String name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> methond<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br><br>        &#125;<br>    &#125;<br><br>    &#123;<br><br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;<br><br>        &#125;<br>        &#123;<br>            <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day14</title>
    <link href="/2022/07/06/day14/"/>
    <url>/2022/07/06/day14/</url>
    
    <content type="html"><![CDATA[<h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><h2 id="instanceof："><a href="#instanceof：" class="headerlink" title="instanceof："></a>instanceof：</h2><p>为了避免在向下转型时出现ClassCastException异常</p><p>如果a instanceof A返回true，则a </p><h2 id="equals方法："><a href="#equals方法：" class="headerlink" title="equals方法："></a>equals方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 面试题：</span><br><span class="hljs-comment">*   == 和 equals()区别</span><br><span class="hljs-comment">* 回顾 == 的使用：</span><br><span class="hljs-comment">*   可以使用在基本数据类型和引用数据类型变量中</span><br><span class="hljs-comment">*   如果比较的是基本数据类型变量，比较两个变量保存的数据是否相等，不一定类型要相同</span><br><span class="hljs-comment">*   如果比较的是引用数据类型变量：比较两个对象的地址值是否相等</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* equal()方法的使用</span><br><span class="hljs-comment">*   是一个方法，而非运算符</span><br><span class="hljs-comment">*   只能适用于引用数据类型</span><br><span class="hljs-comment">*   说明：Object类中定义的equal()方法和==的作用是相同的</span><br><span class="hljs-comment">* 像String、Data、File、包装类等都重写了Object类中的equals()方法。</span><br><span class="hljs-comment">* 重写以后比较的是实体内容是否相同</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 自定义类如果使用equals()的话，也通常是比较两个对象的实体内容是否相同，我们就需要对</span><br><span class="hljs-comment">* Object的equals()重写</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 包装类的使用</span><br><span class="hljs-comment">*   java提供了八种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征</span><br><span class="hljs-comment">*   掌握的：基本数据类型、包装类、String三者直接的转换</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperTest</span> &#123;<br>    <span class="hljs-comment">//基本数据类型--&gt;包装类：调用包装类的构造器</span><br><span class="hljs-comment">//    @Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(num1);<br>        System.out.println(in1.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day13</title>
    <link href="/2022/07/05/day13/"/>
    <url>/2022/07/05/day13/</url>
    
    <content type="html"><![CDATA[<h1 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h1><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>​子类继承父类以后，可以对父类中同名参数的方法进行覆盖操作</p><p>​应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中同名同参数的方法时，实际执行的是子类重写父类的方法。</p><p>​重写的规定：</p><p>​方法的声明，权限修饰符，返回值类型，方法名（）{}</p><p>​子类中不能重写父类中private的方法</p><p>​返回值类型</p><p>​父类中被重写的方法返回值是void，子类重写的只能是void</p><p>​父类被重写的方法的返回值类型是A类型，则子类重写的返回值类型可以是A类或者是A的子类</p><p>​父类被重写的是基本数据类型，则子类的返回值类型也必须是基本数据类型</p><h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><p>​区分方法的重载与重写</p><h2 id="子类对象实例化的过程"><a href="#子类对象实例化的过程" class="headerlink" title="子类对象实例化的过程"></a>子类对象实例化的过程</h2><p>*子类对象实例化的过程</p><ul><li>从结果上看：</li><li><pre><code class="hljs">  子类继承父类以后，就获取了父类中声明的属性和方法</code></pre></li><li><pre><code class="hljs">  创建子类的对象，在堆空间中就会加载所有父类的属性</code></pre></li><li>从过程上看：</li><li><pre><code class="hljs">  我们通过子类的构造器创建子类对象时，我们一定会直接或简介的调用父类的构造器，</code></pre></li><li><pre><code class="hljs">  知道调用了java.lang.Object类中的空参的构造器为止，正因为加载过所有父类的结构，所以</code></pre></li><li><pre><code class="hljs">  才可以调用父类的结构，子类对象才可以考虑进行调用</code></pre></li><li>明确：虽然创建子类的时候调用了父类的构造器，但始终只创建了一个对象</li></ul><h2 id="exer："><a href="#exer：" class="headerlink" title="exer："></a>exer：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.stu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> annuallnterestRate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">double</span> balance, <span class="hljs-type">double</span> annuallnterestRate)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>        <span class="hljs-built_in">this</span>.annuallnterestRate = annuallnterestRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnuallnterestRate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> annuallnterestRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAnnuallnterestRate</span><span class="hljs-params">(<span class="hljs-type">double</span> annuallnterestRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.annuallnterestRate = annuallnterestRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMonthlyInterest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> annuallnterestRate / <span class="hljs-number">12</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span>&#123;<br>        <span class="hljs-keyword">if</span>(balance &lt; amount)&#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        balance -= amount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span>&#123;<br>        balance += amount;<br>        System.out.println(<span class="hljs-string">&quot;存钱成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.stu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Account</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> overdraft;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CheckAccount</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">double</span> balance, <span class="hljs-type">double</span> annuallnterestRate, <span class="hljs-type">double</span> overdraft)</span> &#123;<br>        <span class="hljs-built_in">super</span>(id, balance, annuallnterestRate);<br>        <span class="hljs-built_in">this</span>.overdraft = overdraft;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span>(getBalance() &gt;= amount)&#123;<br>            <span class="hljs-built_in">super</span>.withdraw(amount);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(overdraft &gt;= amount - getBalance())&#123;<br>            setBalance(<span class="hljs-number">0</span>);<br>            overdraft -= (amount - getBalance())<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;超过可透支限额&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.stu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1122</span>,<span class="hljs-number">20000</span>,<span class="hljs-number">0.045</span>);<br>        p.withdraw(<span class="hljs-number">30000</span>);<br>        System.out.println(<span class="hljs-string">&quot;余额为:&quot;</span> + p.getBalance());<br>        p.withdraw(<span class="hljs-number">2500</span>);<br>        p.deposit(<span class="hljs-number">3000</span>);<br>        System.out.println(<span class="hljs-string">&quot;余额为:&quot;</span> + p.getBalance());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态性："><a href="#多态性：" class="headerlink" title="多态性："></a>多态性：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 面向对象特征三多态性</span><br><span class="hljs-comment">* 理解多态性：一个事物的多种形态</span><br><span class="hljs-comment">* 何为多态性：父类的引用指向父类的对象</span><br><span class="hljs-comment">* 多态的使用：</span><br><span class="hljs-comment">* 有了对象的多态性以后，我们在编译的时候实际调用的是父类的</span><br><span class="hljs-comment">* 编译看左边，运行看右边</span><br><span class="hljs-comment">* 多态性的使用前提：</span><br><span class="hljs-comment">* 类的继承关系</span><br><span class="hljs-comment">* 方法的重写</span><br><span class="hljs-comment">* 对象的多态性</span><br><span class="hljs-comment">* 只适用于方法，不适用于属性</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.eat();<br>        <span class="hljs-type">Man</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br>        man.eat();<br>        man.age = <span class="hljs-number">22</span>;<br>        man.earnMoney();<br>        <span class="hljs-comment">//多态性,父类的引用指向子类的对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br>      <span class="hljs-comment">//  Person p3 = new Woman();</span><br>        <span class="hljs-comment">//多态的使用：当调用子父类同名参数的方法，实际执行的时子类重写父类的方法---虚拟方法的调用</span><br>        p2.eat();<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12</title>
    <link href="/2022/07/04/day12/"/>
    <url>/2022/07/04/day12/</url>
    
    <content type="html"><![CDATA[<h1 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h1><h2 id="面向对象的特征之二：继承性"><a href="#面向对象的特征之二：继承性" class="headerlink" title="面向对象的特征之二：继承性"></a>面向对象的特征之二：继承性</h2><h3 id="继承性的好处："><a href="#继承性的好处：" class="headerlink" title="继承性的好处："></a>继承性的好处：</h3><p>​减少了代码的冗余，提高了代码的复用性</p><p>​便于功能的扩展</p><p>​为之后多态性的使用，提供了前提</p><h3 id="继承性的格式：class-A-extends-B"><a href="#继承性的格式：class-A-extends-B" class="headerlink" title="继承性的格式：class A extends B {}"></a>继承性的格式：class A extends B {}</h3><p>​A：子类、派生类</p><p>​B：父类、超类、基类</p><p>​体现：一旦子类继承父类，子类就获得父类所有的结构属性和方法</p><p>​子类继承父类以后，还可以定义特有的属性和方法：实现功能的扩展</p><h3 id="Java中关于继承的定义"><a href="#Java中关于继承的定义" class="headerlink" title="Java中关于继承的定义"></a>Java中关于继承的定义</h3><p>​一个类可以被多个子类继承</p><p>​一个子类只能继承一个父类</p><p>​子类父类是相对概念</p><p>如果我没没有显式的声明一个父类的话，那就继承java.lang.Object</p><p>所有的java类都具有java.lang.Object他的功能</p><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kinds</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ManKind</span> &#123;<br>    <span class="hljs-type">int</span> yearsOld;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAge</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;yearsOld&quot;</span> + yearsOld);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Kinds</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Kinds</span><span class="hljs-params">(<span class="hljs-type">int</span> yearsOld)</span> &#123;<br>        <span class="hljs-built_in">this</span>.yearsOld = yearsOld;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYearsOld</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> yearsOld;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYearsOld</span><span class="hljs-params">(<span class="hljs-type">int</span> yearsOld)</span> &#123;<br>        <span class="hljs-built_in">this</span>.yearsOld = yearsOld;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">import</span> sun.awt.windows.WPrinterJob;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManKind</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ManKind</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ManKind</span><span class="hljs-params">(<span class="hljs-type">int</span> sex, <span class="hljs-type">int</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manOrWoman</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(sex == <span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;man&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Woman&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">employed</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(salary == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;yes&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">int</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">int</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KindsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Kinds</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Kinds</span>(<span class="hljs-number">12</span>);<br>        k.printAge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day10--面向对象</title>
    <link href="/2022/07/02/day10--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/07/02/day10--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="day10–面向对象"><a href="#day10–面向对象" class="headerlink" title="day10–面向对象"></a>day10–面向对象</h1><h2 id="封装与隐藏"><a href="#封装与隐藏" class="headerlink" title="封装与隐藏"></a>封装与隐藏</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> AnimalTest;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 面向对象的特征一：封装与隐藏</span><br><span class="hljs-comment">* 问题的引入：</span><br><span class="hljs-comment">*   当我们创建一个类的对象以后，我们通过&quot;对象属性&quot;的方式，对对象的属性进行赋值，这里，赋值操作要受到</span><br><span class="hljs-comment">*   属性的数据类型的存储范围限制。</span><br><span class="hljs-comment">*   同时我们要避免用户在使用“对象.属性”的方式进行赋值</span><br><span class="hljs-comment">*   此时针对属性体现封装性</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 封装性的体现：</span><br><span class="hljs-comment">*   我们将类的属性私有化，同时，提供公共的方式来获取和设置此属性</span><br><span class="hljs-comment">*   扩展：封装的体现：</span><br><span class="hljs-comment">*       我们将类的属性私有化，同时，提供公共的方式来获取和设置此属性</span><br><span class="hljs-comment">        不对外暴露的私有的方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  *封装性的体现，需要权限修饰符来配合</span><br><span class="hljs-comment">  *  java规定了4种权限修饰符（从小到大）private、缺省、protected、public</span><br><span class="hljs-comment">  *     四种权限可以用来修饰类以及类的内部结构：属性、方法、构造器、内部类</span><br><span class="hljs-comment">  *     具体的：四种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类</span><br><span class="hljs-comment">  *         修饰类的话只能是用缺省或者是public</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * 总结封装性：java提供了四种权限修饰符及类的内部结构，体现可调用性的大小</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        a.name = <span class="hljs-string">&quot;大黄&quot;</span>;<br><span class="hljs-comment">//        a.age = 1;</span><br><span class="hljs-comment">//        a.legs = 4;</span><br>        a.setlegs(-<span class="hljs-number">6</span>);<br>        a.show();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> legs;<br>    <span class="hljs-comment">//对属性的设置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setlegs</span><span class="hljs-params">(<span class="hljs-type">int</span> l)</span>&#123;<br>        <span class="hljs-keyword">if</span>(l &gt;= <span class="hljs-number">0</span>&amp;&amp;l % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            legs = l;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            legs = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//对属性的获取</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLegs</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> legs;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        age = a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进食&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;名字&quot;</span> + name + <span class="hljs-string">&quot;年龄&quot;</span> + age + <span class="hljs-string">&quot;腿&quot;</span> + legs);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="javabean"><a href="#javabean" class="headerlink" title="javabean"></a>javabean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Customer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JavaBean是一种java语言写成的可重用组件</span><br><span class="hljs-comment">* 所谓javaBean式值符合如下标准的java类</span><br><span class="hljs-comment">*   类式公共的</span><br><span class="hljs-comment">*   有一个无参的公共构造器</span><br><span class="hljs-comment">*   有属性，且有对应的get、set方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        id = i;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> PackageImportTest;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* package关键字的使用</span><br><span class="hljs-comment">*   为了更好的实现项目中类的管理，提供了包的概念</span><br><span class="hljs-comment">*   使用package使用在首行</span><br><span class="hljs-comment">*   包，属于标识符，遵循标识符的命名规则和规范&quot;见名知意&quot;</span><br><span class="hljs-comment">*   每.一次，就代表一层文件目录</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 补充：同一个包下，不能命名同名的接口或者是类</span><br><span class="hljs-comment">*       不同的包下，可以命名同名的接口，类</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* import关键字的使用</span><br><span class="hljs-comment">*   import:导入</span><br><span class="hljs-comment">*   在源文件中显式的使用import结构导入指定包下的结构</span><br><span class="hljs-comment">*   声明在包的声明和类的声明之间</span><br><span class="hljs-comment">*   如果需要导入多个结构，则并列写出即可</span><br><span class="hljs-comment">*   可以使用&quot;xxx.&quot;的方式，表示可以导入xxx包下的所有结构</span><br><span class="hljs-comment">*   如果使用的类或者结构式java.lang包下定义的，则可以省略</span><br><span class="hljs-comment">*   如果使用的类或接口式本包下定义的则可以省略</span><br><span class="hljs-comment">*   如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式进行显示</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-keyword">import</span> OrderTest.Order;<br><span class="hljs-keyword">import</span> OrderTest.OrderTest;<br><span class="hljs-keyword">import</span> PersonTest.PersonTest;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackageImportTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">OrderTest</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderTest</span>();<br>        <span class="hljs-type">PersonTest</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonTest</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08--类</title>
    <link href="/2022/06/30/day08--%E7%B1%BB/"/>
    <url>/2022/06/30/day08--%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="day08–类"><a href="#day08–类" class="headerlink" title="day08–类"></a>day08–类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czg.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; student.length;i++)&#123;<br>            student[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>            <span class="hljs-comment">//给student的属性赋值</span><br>            student[i].number = i+<span class="hljs-number">1</span>;<br>            student[i].state = (<span class="hljs-type">int</span>)(Math.random()*(<span class="hljs-number">6</span> - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>            student[i].score = (<span class="hljs-type">int</span>)(Math.random()*(<span class="hljs-number">100</span>-<span class="hljs-number">0</span>+<span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-type">StudentTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentTest</span>();<br>        test.print(student);<br>    &#125;<br>    <span class="hljs-comment">//遍历Student</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Student[] student)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; student.length;i++)&#123;<br>            System.out.println(student[i].info());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-type">int</span> number;<span class="hljs-comment">//学号</span><br>    <span class="hljs-type">int</span> score;<span class="hljs-comment">//成绩</span><br>    <span class="hljs-type">int</span> state;<span class="hljs-comment">//年级</span><br>    <span class="hljs-comment">//显示学生信息的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学号&quot;</span> + number + <span class="hljs-string">&quot;年级&quot;</span> + state + <span class="hljs-string">&quot;成绩&quot;</span> + score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07--Arrays工具类使用</title>
    <link href="/2022/06/29/day07--Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/29/day07--Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="day07–Arrays工具类使用"><a href="#day07–Arrays工具类使用" class="headerlink" title="day07–Arrays工具类使用"></a>day07–Arrays工具类使用</h1><p>1.boolean equals(int[] a,int[] b)&#x2F;&#x2F;判断两个数组是否相等</p><p>2.String toString&#x2F;&#x2F;输出数组信息</p><p>3.void fill(int[] a,int val)&#x2F;&#x2F;将指定的值填入数组当中</p><p>4.void sort(int[] a)&#x2F;&#x2F;快速排序</p><p>5.int binarysearch(int[] a,int key);&#x2F;&#x2F;二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> BasePractice;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.boolean equals(int[] a,int[] b)//判断两个数组是否相等</span><br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>        System.out.println(Arrays.equals(arr1,arr2));<br><br>        <span class="hljs-comment">//2.String toString//输出数组信息</span><br>        System.out.println(Arrays.toString(arr1));<br><br>        <span class="hljs-comment">//3.void fill(int[] a,int val)//将指定的值填入数组当中</span><br>        Arrays.fill(arr1,<span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(arr1));<br><br>        <span class="hljs-comment">//4.void sort(int[] a)//快速排序</span><br>        Arrays.sort(arr2);<br>        System.out.println(Arrays.toString(arr2));<br><br>        <span class="hljs-comment">//int binarysearch(int[] a,int key);//二分查找</span><br>        System.out.println(Arrays.toString(arr1));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr1,<span class="hljs-number">2</span>);<br>        System.out.println(index);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06--数组</title>
    <link href="/2022/06/28/day06--%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/28/day06--%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="day06–数组"><a href="#day06–数组" class="headerlink" title="day06–数组"></a>day06–数组</h1><h2 id="一维数组的使用："><a href="#一维数组的使用：" class="headerlink" title="一维数组的使用："></a>一维数组的使用：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 1.数组：多个相同类型的数据按一定顺序排列的集合</span><br><span class="hljs-comment">* 2.数组的相关概念：</span><br><span class="hljs-comment">*   数组名</span><br><span class="hljs-comment">*   元素</span><br><span class="hljs-comment">*   角标、下标、索引</span><br><span class="hljs-comment">*   数组的长度、元素的个数</span><br><span class="hljs-comment">* 3.数组的特点</span><br><span class="hljs-comment">*   数组是有序排列</span><br><span class="hljs-comment">*   数组属于引用数据类型的变量、数组的元素，既可以是基本数据类型也可以是引用数据类型</span><br><span class="hljs-comment">* 4.数组的分类：</span><br><span class="hljs-comment">*   一维数组，二维数组……</span><br><span class="hljs-comment">*   按数组元素：基本数据类型的数组、引用数据类型元素的数组</span><br><span class="hljs-comment">* 5.一维数组的使用</span><br><span class="hljs-comment">*   一维数组的声明和初始化</span><br><span class="hljs-comment">*   如何调用数组的指定位置元素</span><br><span class="hljs-comment">*   如何获取数组的长度</span><br><span class="hljs-comment">*   如何遍历数组</span><br><span class="hljs-comment">*   数组元素的默认初始化值</span><br><span class="hljs-comment">*   数组的内存解析</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">package</span> com.chenzengguang.shuzu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//一维数组的声明和初始化</span><br>        <span class="hljs-type">int</span> num;<br>        num = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br><br>        <span class="hljs-type">int</span>[] ids;<span class="hljs-comment">//声明</span><br>        ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>&#125;;<br>        <span class="hljs-comment">//动态初始化</span><br>        String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">//总结：初始化完之后。数组的长度就确定了</span><br>        <span class="hljs-comment">//如何调用数组的指定位置的元素:</span><br>        <span class="hljs-comment">//数组的角标是从0开始的</span><br>        names[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;王明&quot;</span>;<br>        names[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;王和&quot;</span>;<br>        names[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;张学良&quot;</span>;<br>        names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;孙巨龙&quot;</span>;<br>        names[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;王洪龙&quot;</span>;<br>        <span class="hljs-comment">// names[5] = &quot;周扬&quot;;</span><br><br>        <span class="hljs-comment">//如何获取数组的长度</span><br>        <span class="hljs-comment">//属性：length</span><br>        System.out.println(names.length);<span class="hljs-comment">//5</span><br><br>        <span class="hljs-comment">//如何遍历数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; names.length;i++)&#123;<br>            System.out.println(names[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 数组元素的默认初始化值</span><br><span class="hljs-comment">*   数组元素都是整形：0</span><br><span class="hljs-comment">*   数组元素是浮点型：0.0</span><br><span class="hljs-comment">*   数组元素是char型： 0或</span><br><span class="hljs-comment">*   数组元素是boolean型： false</span><br><span class="hljs-comment">*   数组元素是引用数据类型：null</span><br><span class="hljs-comment">* 数组的内存解析：</span><br><span class="hljs-comment">*   </span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">package</span> com.chenzengguang.shuzu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//数组元素的默认初始化值</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>        String[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br>        System.out.println(arr1[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维数组的使用："><a href="#二维数组的使用：" class="headerlink" title="二维数组的使用："></a>二维数组的使用：</h2>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>while循环</title>
    <link href="/2022/06/27/day05--while%E5%BE%AA%E7%8E%AF/"/>
    <url>/2022/06/27/day05--while%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="day05–while循环"><a href="#day05–while循环" class="headerlink" title="day05–while循环"></a>day05–while循环</h1><h2 id="while-循环的使用"><a href="#while-循环的使用" class="headerlink" title="while 循环的使用"></a>while 循环的使用</h2><p>1.循环结构的四个要素<br>初始化条件<br>循环条件–&gt;boolean类型<br>循环体<br>迭代条件<br>2.while循环的结构<br>while(①){<br>    ②;<br>    ③;</p><p>}<br>说明：<br>1.不要丢了迭代条件，一旦丢了，就可能导致死循环<br>2.我们写程序要避免出现死循环<br>3.for循环和while循环是可以相互转换的！<br>    区别：for循环和while循环的作用域不同。<br>*&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">while 循环的使用</span><br><span class="hljs-comment">1.循环结构的四个要素</span><br><span class="hljs-comment">初始化条件</span><br><span class="hljs-comment">循环条件--&gt;boolean类型</span><br><span class="hljs-comment">循环体</span><br><span class="hljs-comment">迭代条件</span><br><span class="hljs-comment">2.while循环的结构</span><br><span class="hljs-comment">while(①)&#123;</span><br><span class="hljs-comment">    ②;</span><br><span class="hljs-comment">    ③;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">说明：</span><br><span class="hljs-comment">1.不要丢了迭代条件，一旦丢了，就可能导致死循环</span><br><span class="hljs-comment">2.我们写程序要避免出现死循环</span><br><span class="hljs-comment">3.for循环和while循环是可以相互转换的！</span><br><span class="hljs-comment">    区别：for循环和while循环的作用域不同。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//遍历100以内的所有偶数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">100</span>)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-comment">//除了while循环以后，i依然可以调用</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p>从键盘读入个数不确定的整数，并且判断读入的正数和负数的个数，输入0结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">从键盘读入个数不确定的整数，并且判断读入的正数和负数的个数，输入0结束</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForWhileTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scan.nextInt();<br>            <span class="hljs-keyword">if</span>(number == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(number &gt; <span class="hljs-number">0</span>)<br>                p++;<br>            <span class="hljs-keyword">else</span><br>                n++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;正数的个数为&quot;</span> + p);<br>        System.out.println(<span class="hljs-string">&quot;负数的个数为&quot;</span> + n);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出质数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 100以内所有的质数</span><br><span class="hljs-comment">* 质数：只能被1和他本身整除.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimenumberTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//        long start = System.currentTimeMills();</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i);j++)&#123;<br>                <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-literal">true</span>)&#123;<br>               System.out.println(i);<br>            &#125;<br>            flag = <span class="hljs-literal">true</span>;<br>        &#125;<br><span class="hljs-comment">//        System.out.println(start);</span><br>        <span class="hljs-comment">//优化</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n--图像分类--数据驱动方法</title>
    <link href="/2022/06/26/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/06/26/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>图像分类-数据驱动方法</p><p>计算机视觉真正的核心任务：图像分类</p><p>接受一个图片作为参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify_image</span>(<span class="hljs-params">image</span>):<br>    <span class="hljs-comment"># Some magic here?</span><br>    <span class="hljs-keyword">return</span> class_label<br></code></pre></td></tr></table></figure><p>数据驱动的方法</p><p>训练函数：接收图片和标签然后输出模型</p><p>预测函数：接收一个模型对图片的种类预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#memorize all data and labels</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">images,labels</span>):<br>    <span class="hljs-comment"># Machine learning!</span><br>    <span class="hljs-keyword">return</span> model<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Predict the label of the most similar training image</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">model,test_images</span>):<br><span class="hljs-comment"># Use model to predict labels</span><br><span class="hljs-keyword">return</span> test_labels<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/13/lnevFqA8yc39X5p.png" alt="image-20220621224840831"></p><p><img src="https://s2.loli.net/2022/11/13/LgnUvk67WAOQ4xc.png" alt="image-20220621225527859"></p>]]></content>
    
    
    <categories>
      
      <category>DeepLeanring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n--图像分类--线性分类</title>
    <link href="/2022/06/26/cs231n--%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB/"/>
    <url>/2022/06/26/cs231n--%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n–图像分类-线性分类"><a href="#cs231n–图像分类-线性分类" class="headerlink" title="cs231n–图像分类-线性分类"></a>cs231n–图像分类-线性分类</h1><p> <img src="https://s2.loli.net/2022/11/13/itIpEaJm9ylQgMK.png" alt="image-20220623201415365"></p><p>前提是我们地图像是32×32×3的输入值，我们要取这些值然后把它们展开成一个3072长列向量，现在我们想要得出10个类的得分对于该图像我们想要最终得到10个数字，从而给出每个类别对应的得分情况</p><p>也就是说现在我们的W是10×3072的矩阵，x是3072×10的矩阵</p><p>例如：</p><p><img src="https://s2.loli.net/2022/11/13/BIFZPRKWgUC8a1Y.png" alt="image-20220623202214147"></p><p><img src="https://s2.loli.net/2022/11/13/KNy9xmfdvoebwuZ.png" alt="image-20220623202433927"></p><p>线性分类器只是尽其所能，因为他只允许学习每个类别的一个模板，当我们来看神经网络和更复杂的模型，我们能够得到更好的准确率，因为这些模板再也没有只能每个类别学习一个单独模板的限制</p><p><img src="https://s2.loli.net/2022/11/13/XhNPzMwsxbFj1nB.png" alt="image-20220623202849705"></p><p><img src="https://s2.loli.net/2022/11/13/KNSE8k1hRbHZfso.png" alt="image-20220623202915579"></p><p>线性分类器的困境：蓝色类别是图像中像素的数量，这个数字大于0，并且是奇数，任何像素个数大于0的图像，都归为红色类别，如果你真的去画这些不同的决策出现这些不同的决策取悦，你能看到我们奇数像素点的蓝色类别，在平面上有两个象限，甚至是两个相反的象限，所以我们没有办法能够绘制一条单独的直线，来划分蓝色和红色。</p><p><img src="https://s2.loli.net/2022/11/13/eFIVjLfuotG87wZ.png" alt="image-20220623203610018"></p><hr><h2 id="第二次学线性分类"><a href="#第二次学线性分类" class="headerlink" title="第二次学线性分类"></a>第二次学线性分类</h2><p>在csdn上面看了几篇博客在补充几点：</p><p>博客地址：<a href="https://blog.csdn.net/TeFuirnever/article/details/89318500">https://blog.csdn.net/TeFuirnever/article/details/89318500</a></p><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>我们将要实现一种更强大的方法来解决图像分类问题，该方法可以自然地延伸到神经网络和卷积神经网络上。这种方法主要有两部分组成：一个是<strong>评分函数（score function）</strong>，它是原始图像数据到类别分值的映射。另一个是<strong>损失函数（loss function）</strong>，它是用来量化预测分类标签的得分与真实标签之间一致性的。该方法可转化为一个最优化问题，在最优化过程中，将通过更新评分函数的参数来最小化损失函数值。</p><h3 id="理解线性分类器："><a href="#理解线性分类器：" class="headerlink" title="理解线性分类器："></a>理解线性分类器：</h3><p>线性分类器计算图像中3个颜色通道中所有像素的值与权重的矩阵乘，从而得到分类分值。根据我们对权重设置的值，对于图像中的某些位置的某些颜色，函数表现出喜好或者厌恶（根据每个权重的符号而定）。举个例子，可以想象“船”分类就是被大量的蓝色所包围（对应的就是水）。那么“船”分类器在蓝色通道上的权重就有很多的正权重（它们的出现提高了“船”分类的分值），而在绿色和红色通道上的权重为负的就比较多（它们的出现降低了“船”分类的分值）。</p><p><img src="https://img-blog.csdnimg.cn/20190416082354549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RlRnVpcm5ldmVy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>对于线性回归函数f&#x3D;w*x+b，对w的每一个值进行改变时相当于每一条分界线选择，对b的值进行改变相当于每一天分界线的平移，</p>]]></content>
    
    
    <categories>
      
      <category>DeepLeanring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n--损失函数和优化介绍</title>
    <link href="/2022/06/26/cs231n--%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/06/26/cs231n--%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n–损失函数和优化介绍"><a href="#cs231n–损失函数和优化介绍" class="headerlink" title="cs231n–损失函数和优化介绍"></a>cs231n–损失函数和优化介绍</h1><h2 id="前期回顾："><a href="#前期回顾：" class="headerlink" title="前期回顾："></a>前期回顾：</h2><h3 id="线性分类："><a href="#线性分类：" class="headerlink" title="线性分类："></a>线性分类：</h3><p>所有训练数据中的经验知识都体现在参数矩阵w中，而w通过训练过程得到</p><p><img src="https://s2.loli.net/2022/11/13/wcMvPZTe8AUnDa4.png" alt="image-20220626173058427"></p><p>w矩阵的每一行都对应一个分类模板</p><h2 id="损失函数和优化介绍"><a href="#损失函数和优化介绍" class="headerlink" title="损失函数和优化介绍"></a>损失函数和优化介绍</h2><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626173601946.png" alt="image-20220626173601946"></p><p>用W预测这十个类的得分，显然这个预测的结果并不是很好，对于猫他在狗的得分更多，也就是线性分类认为他更可能是狗，青蛙也不是很好。</p><p>那么就需要写一个函数自动的决定哪个w更好，那么就需要一个函数–损失函数</p><h3 id="损失函数："><a href="#损失函数：" class="headerlink" title="损失函数："></a>损失函数：</h3><p>把w当作输出，然后看一下得分，分析w的好坏。</p><h3 id="优化过程："><a href="#优化过程：" class="headerlink" title="优化过程："></a>优化过程：</h3><p>找到一种有效的方式从w的可行域里找到w取什么值是最不坏的情况</p><h3 id="损失函数：-1"><a href="#损失函数：-1" class="headerlink" title="损失函数："></a>损失函数：</h3><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626174228936.png" alt="image-20220626174228936"></p><p>x：是图片每个像素点所构成的数据集。</p><p>y：是你希望算法预测出来的东西。我们通常称之为标签或目标，因为在图像分类的问题里面，我们是希望把图片分到1-10的每一类里面，所以y是1-10的整数</p><h3 id="损失函数L-i："><a href="#损失函数L-i：" class="headerlink" title="损失函数L-i："></a>损失函数L-i：</h3><p>L最终是整个数据集中N个样本的损失函数的总和的平均</p><h3 id="SVM损失函数："><a href="#SVM损失函数：" class="headerlink" title="SVM损失函数："></a>SVM损失函数：</h3><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626175353691.png" alt="image-20220626175353691"></p><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626175702047.png" alt="image-20220626175702047"></p><p>s_yi:预测过程中图片应该所属类的得分</p><p>s：是分类器预测的分数</p><p>y轴:y轴是损失</p><p>随着真实分类的分数上升，损失会下降</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626180408744.png" alt="image-20220626180408744"></p><h3 id="L-i损失函数代码："><a href="#L-i损失函数代码：" class="headerlink" title="L-i损失函数代码："></a>L-i损失函数代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">L_i_vectorized</span>(<span class="hljs-params">x,y,w</span>):<br>scores = W.dot(x)<br>    margins = np,maximum(<span class="hljs-number">0</span>,scores - scores[y] + <span class="hljs-number">1</span>)<br>    margins[y] = <span class="hljs-number">0</span><br>    loss_i = np.<span class="hljs-built_in">sum</span>(margins)<br>    <span class="hljs-keyword">return</span> loss_i<br></code></pre></td></tr></table></figure><h3 id="正则项："><a href="#正则项：" class="headerlink" title="正则项："></a>正则项：</h3><p><img src="C:\Users\86187\Desktop\深度学习\img\image-20220626184406605.png" alt="image-20220626184406605"></p><h3 id="L2正则化："><a href="#L2正则化：" class="headerlink" title="L2正则化："></a>L2正则化：</h3><h3 id="Softmax分类器："><a href="#Softmax分类器：" class="headerlink" title="Softmax分类器："></a>Softmax分类器：</h3><h3 id="怎么选择w"><a href="#怎么选择w" class="headerlink" title="怎么选择w"></a>怎么选择w</h3><h3 id="怎么使用w"><a href="#怎么使用w" class="headerlink" title="怎么使用w"></a>怎么使用w</h3>]]></content>
    
    
    <categories>
      
      <category>DeepLeanring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n--p5图像分类-k最邻近算法</title>
    <link href="/2022/06/26/cs231n--p5%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-k%E6%9C%80%E9%82%BB%E8%BF%91%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/26/cs231n--p5%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-k%E6%9C%80%E9%82%BB%E8%BF%91%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n–p5图像分类-k最邻近算法"><a href="#cs231n–p5图像分类-k最邻近算法" class="headerlink" title="cs231n–p5图像分类-k最邻近算法"></a>cs231n–p5图像分类-k最邻近算法</h1><h2 id="K-Nearest-Neignbors：Distance-Metric"><a href="#K-Nearest-Neignbors：Distance-Metric" class="headerlink" title="K-Nearest Neignbors：Distance Metric"></a>K-Nearest Neignbors：Distance Metric</h2><p>L1的距离取决于你选择的坐标系统，如果你转动坐标轴将会改变点之间的L1距离，而改变坐标轴对L2的距离毫无影响</p><p><img src="https://s2.loli.net/2022/11/13/inDPZjCeakguNxh.png" alt="image-20220622212347455"></p><p><img src="https://s2.loli.net/2022/11/13/CSKPXhk9REUaBND.png" alt="image-20220622212525806"></p><p>超参数：像K和距离度量这样的选择</p><p>question1、</p><p>在什么情况下L1距离要比L2距离表现的好：</p><p>回答：这主要和要解决的问题相关，它很难说在哪种情况下一个比另一个更好，但是我认为因为L1有这种坐标依赖，它实际上依赖于数据的坐标系统，如果你知道你有一个向量，向量的各个元素，可能有意义，比如你也许处于某种原因要对员工进行分类向量的不同元素对应着员工的不同特征，这种情况下L1表现的更好</p><p>吧数据分为三组，训练集，验证集，测试集</p><p><img src="https://s2.loli.net/2022/11/13/4WNmwgrHDkyvMKo.png" alt="image-20220622213736985"></p><h2 id="交叉验证："><a href="#交叉验证：" class="headerlink" title="交叉验证："></a>交叉验证：</h2><p><img src="https://s2.loli.net/2022/11/13/pW578cRoJDI1q9h.png" alt="image-20220622213944175"></p><h2 id="交叉验证的结果"><a href="#交叉验证的结果" class="headerlink" title="交叉验证的结果"></a>交叉验证的结果</h2><p><img src="https://s2.loli.net/2022/11/13/vDBpYeUsA4OCqjM.png" alt="image-20220622214345771"></p><p>这两组图片的L2距离相同（构造出来的）</p><p><img src="https://s2.loli.net/2022/11/13/wV8mCrMFWStAuPI.png" alt="image-20220622214639561"></p><h2 id="维度灾难："><a href="#维度灾难：" class="headerlink" title="维度灾难："></a>维度灾难：</h2><p><img src="https://s2.loli.net/2022/11/13/hLlpKZW7CuraqET.png" alt="image-20220622214736162"></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>KNN介绍了图像分类的基本思路借助训练集的图片和相应的标记我们可以预测测试集中数据的分类</p><h2 id="knn作业："><a href="#knn作业：" class="headerlink" title="knn作业："></a>knn作业：</h2><p><img src="https://s2.loli.net/2022/11/13/9s67joFO5UTDB2v.png" alt="image-20220622215127637"></p>]]></content>
    
    
    <categories>
      
      <category>DeepLeanring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Study</title>
    <link href="/2022/06/26/ProcessStudy/"/>
    <url>/2022/06/26/ProcessStudy/</url>
    
    <content type="html"><![CDATA[<p>：</p><p>记录每天学习进度：</p><h3 id="2022-x2F-06-x2F-26："><a href="#2022-x2F-06-x2F-26：" class="headerlink" title="2022&#x2F;06&#x2F;26："></a>2022&#x2F;06&#x2F;26：</h3><p>java循环语句和DeepLeanring，今天决定开始从机器学习开始学，深度学习太难了😭</p><h3 id="2022-x2F-07-x2F-19："><a href="#2022-x2F-07-x2F-19：" class="headerlink" title="2022&#x2F;07&#x2F;19："></a>2022&#x2F;07&#x2F;19：</h3><p>第二次更新已经过了快一个月了，java还差两天内容，机器学习，pytorch学了一部分，已经重回深度学习了cs231n</p><h3 id="2022-x2F-11-x2F-09："><a href="#2022-x2F-11-x2F-09：" class="headerlink" title="2022&#x2F;11&#x2F;09："></a>2022&#x2F;11&#x2F;09：</h3><p>第三次更新已经过去很长时间了，主要是前段时间比较迷茫，不知道学什么，现在确定搞科研，医学影像分割方向，然后以后尽量多更新点论文笔记，同时课余时间更新学习课程记录的笔记🤭</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day04--for</title>
    <link href="/2022/06/26/day04--%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/06/26/day04--%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="day04–循环语句"><a href="#day04–循环语句" class="headerlink" title="day04–循环语句"></a>day04–循环语句</h1><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>在某些条件满足的情况下，反复执行特定代码</p><h2 id="循环语句分类"><a href="#循环语句分类" class="headerlink" title="循环语句分类"></a>循环语句分类</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">for循环的结构使用</span><br><span class="hljs-comment">1.循环结构的四个要素</span><br><span class="hljs-comment">初始化条件</span><br><span class="hljs-comment">循环条件--&gt;boolean类型</span><br><span class="hljs-comment">循环体</span><br><span class="hljs-comment">迭代条件</span><br><span class="hljs-comment">2.for循环的结构</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">for(①;②;④)&#123;</span><br><span class="hljs-comment">    ③</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        for(int i = 0;i &lt; 5;i++)</span><br><span class="hljs-comment">//            System.out.println(&quot;hello world&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br>        <span class="hljs-comment">//遍历100以内的偶数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(i);<br>                &#125;<br>            &#125;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day04--Scanner,if-else,switch-case</title>
    <link href="/2022/06/26/day04--Scanner,if-else,switch-case/"/>
    <url>/2022/06/26/day04--Scanner,if-else,switch-case/</url>
    
    <content type="html"><![CDATA[<h1 id="day04–Scanner-if-else-switch-case"><a href="#day04–Scanner-if-else-switch-case" class="headerlink" title="day04–Scanner,if-else,switch-case"></a>day04–Scanner,if-else,switch-case</h1><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner:"></a>Scanner:</h2><p>如何从键盘获取不同的变量，使用Scanner类</p><p>具体实现步骤：<br>1.导包：import Java.util.Scanner;<br>2..Scanner的实例化<br>3.调用Scanner类的相关方法，来获取指定类型的变量</p><p>注意：<br>需要按照相应的方法，来输入指定类型的值，如果输入类型的值与要求的类型不匹配时，会报一个异常，导致程序中止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如何从键盘获取不同的变量，使用Scanner类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">具体实现步骤：</span><br><span class="hljs-comment">1.导包：import Java.util.Scanner;</span><br><span class="hljs-comment">2..Scanner的实例化</span><br><span class="hljs-comment">3.调用Scanner类的相关方法，来获取指定类型的变量</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">需要按照相应的方法，来输入指定类型的值，如果输入类型的值与要求的类型不匹配时，会报一个异常，导致程序中止</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入你的姓名&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scan.next();<br>        System.out.println(name);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scan.nextInt();<br>        System.out.println(age);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的体重&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scan.nextDouble();<br>        System.out.println(weight);<br><br>        System.out.println(<span class="hljs-string">&quot;你是否相中我了呢？（true/false）&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">islove</span> <span class="hljs-operator">=</span> scan.nextBoolean();<br>        System.out.println(islove);<br><br>        <span class="hljs-comment">//char型的获取，Scanner没有提供相关的方法，只能获取一个字符串</span><br>        System.out.println(<span class="hljs-string">&quot;请输入你的性别：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scan.next();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">genderChar</span> <span class="hljs-operator">=</span> gender.charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//获取索引为0位置上的字符</span><br>        System.out.println(genderChar);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="IfTest1"><a href="#IfTest1" class="headerlink" title="IfTest1:"></a>IfTest1:</h2><p>1.else 结构时可选的。<br>2.针对于条件表达式：<br>    如果多个条件表达式之间时”互斥“关系（或没有交集的关系），顺序无所谓<br>    但是如果有交集的关系，顺序不能颠倒<br>    如果条件表达式之间有包含关系，通常情况下，需要将范围小的声明在范围大的上面<br>*&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明：</span><br><span class="hljs-comment">1.else 结构时可选的。</span><br><span class="hljs-comment">2.针对于条件表达式：</span><br><span class="hljs-comment">    如果多个条件表达式之间时”互斥“关系（或没有交集的关系），顺序无所谓</span><br><span class="hljs-comment">    但是如果有交集的关系，顺序不能颠倒</span><br><span class="hljs-comment">    如果条件表达式之间有包含关系，通常情况下，需要将范围小的声明在范围大的上面</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入越小彭的期末成绩&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆宝马&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Iftest2"><a href="#Iftest2" class="headerlink" title="Iftest2:"></a>Iftest2:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明：</span><br><span class="hljs-comment">1.if else 可以嵌套</span><br><span class="hljs-comment">2.如果if-else只有一条语句可以省略大括号</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Systme.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入第一个整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Scanner.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入第二个整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        Ststem.out.println(<span class="hljs-string">&quot;请输入第三个整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br><span class="hljs-comment">//        if(num1 &gt;= num2)&#123;</span><br><span class="hljs-comment">//            if(num3 &gt;= num1)&#123;</span><br><span class="hljs-comment">//                System.out.println</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case:"></a>switch-case:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分支结构之二：switch-case</span><br><span class="hljs-comment">1.格式</span><br><span class="hljs-comment">switch（表达式）&#123;</span><br><span class="hljs-comment">case 常量1:</span><br><span class="hljs-comment">    执行语句1;</span><br><span class="hljs-comment">    //break;</span><br><span class="hljs-comment">case 常量2:</span><br><span class="hljs-comment">    执行语句2;</span><br><span class="hljs-comment">    //break;</span><br><span class="hljs-comment">    ……</span><br><span class="hljs-comment">default:</span><br><span class="hljs-comment">    执行语句n;</span><br><span class="hljs-comment">    //break</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">2.说明根据switch表达式中的值，一次匹配case中的常量，一旦匹配成功，则进入相应的case</span><br><span class="hljs-comment">中，调用其他语句，并依次向下执行直到末尾结束位置；</span><br><span class="hljs-comment">break，可以使用在switch-case中一旦遇到break，就结束</span><br><span class="hljs-comment">switch结构中的表达式，只能是如下的六种数据类型之一，byte，short，char，int，枚举类型，String</span><br><span class="hljs-comment">case之后只能声明常量，不能声明范围</span><br><span class="hljs-comment">break关键字是可选的</span><br><span class="hljs-comment">default，相当于if-else中的else；</span><br><span class="hljs-comment">    default结构是可选的。</span><br><span class="hljs-comment">            位置是不固定的</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">switch</span>(number)&#123;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(<span class="hljs-string">&quot;zer0&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;one&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;two&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;three&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitStudy</title>
    <link href="/2022/06/26/git/"/>
    <url>/2022/06/26/git/</url>
    
    <content type="html"><![CDATA[<p>：</p><p>学习git记录的一些东西</p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="git常用命令："><a href="#git常用命令：" class="headerlink" title="git常用命令："></a>git常用命令：</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span>--<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span><span class="hljs-comment">//设置用户名</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span><span class="hljs-comment">//设置邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git init<span class="hljs-regexp">//</span>初始化<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ll<span class="hljs-regexp">//</span>查看文件<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git status<span class="hljs-regexp">//</span>查看状态<br></code></pre></td></tr></table></figure><p>在vim中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yy<span class="hljs-regexp">//</span>复制<br>p<span class="hljs-regexp">//</span>粘贴<br>:wq<span class="hljs-regexp">//</span>保存退出<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git add<span class="hljs-regexp">//</span>添加暂存区<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git rm <span class="hljs-attr">--cached</span> hello<span class="hljs-selector-class">.txt</span> hello.txt<span class="hljs-comment">//删除暂存区</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ctrl+l<span class="hljs-regexp">//</span>清屏<br></code></pre></td></tr></table></figure><h2 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h2><p>形成历史版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m<span class="hljs-string">&quot;日志信息&quot;</span> 文件名<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log<span class="hljs-comment">//查看引用日志信息</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><span class="hljs-comment">//查看详细日志信息</span><br></code></pre></td></tr></table></figure><h2 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git reset --hard fb6db5d<span class="hljs-regexp">//</span>穿越回历史版本<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat 文件名<span class="hljs-regexp">//</span>猫一眼<br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="分支操作："><a href="#分支操作：" class="headerlink" title="分支操作："></a>分支操作：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git branch 分支名<span class="hljs-regexp">//</span>创建分支<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git branch -v<span class="hljs-regexp">//</span>查看分支<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>修改分支<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git checkout<span class="hljs-regexp">//</span>切换分支<br></code></pre></td></tr></table></figure><h3 id="合并分支："><a href="#合并分支：" class="headerlink" title="合并分支："></a>合并分支：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git merge 分支名<span class="hljs-regexp">//</span>合并分支<br></code></pre></td></tr></table></figure><h3 id="产生冲突："><a href="#产生冲突：" class="headerlink" title="产生冲突："></a>产生冲突：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git commit -m<span class="hljs-string">&quot; &quot;</span><span class="hljs-regexp">//</span>不加文件名<br></code></pre></td></tr></table></figure><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p>全球最大的性交友网站，技术宅男的天堂，新世界的大门，你还在等什么！</p><p><a href="https://github.com/poker-faced-ray/git-demo.git">https://github.com/poker-faced-ray/git-demo.git</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote -v<span class="hljs-regexp">//</span>查看别名<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> 链接<span class="hljs-comment">//创建别名</span><br></code></pre></td></tr></table></figure><p>推送代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">push</span> <span class="hljs-keyword">ma</span><span class="hljs-string">&#x27;s&#x27;</span>te<br></code></pre></td></tr></table></figure><p>拉取</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git pull git-<span class="hljs-built_in">demo</span> 分支<br></code></pre></td></tr></table></figure><p>克隆</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/poker-faced-ray/gi</span>t-demo.git<br></code></pre></td></tr></table></figure><p>拉取代码，初始化库，创建别名：</p><h2 id="git–GitHub团队协作以后在学"><a href="#git–GitHub团队协作以后在学" class="headerlink" title="git–GitHub团队协作以后在学"></a>git–GitHub团队协作以后在学</h2><h2 id="git–GitHub跨团队协作以后在学"><a href="#git–GitHub跨团队协作以后在学" class="headerlink" title="git–GitHub跨团队协作以后在学"></a>git–GitHub跨团队协作以后在学</h2><h2 id="git–idea环境准备"><a href="#git–idea环境准备" class="headerlink" title="git–idea环境准备"></a>git–idea环境准备</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><br>hs_err_pid*<br><br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GitStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机硬件介绍</title>
    <link href="/2022/06/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/06/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机硬件介绍"><a href="#计算机硬件介绍" class="headerlink" title="计算机硬件介绍"></a>计算机硬件介绍</h1><h2 id="中央处理器："><a href="#中央处理器：" class="headerlink" title="-中央处理器："></a>-中央处理器：</h2><p>​是计算机的大脑。它从内存中获取指令，然后执行这些指令。</p><h3 id="包括："><a href="#包括：" class="headerlink" title="包括："></a>包括：</h3><p>​控制单元和算术&#x2F;逻辑单元</p><h4 id="控制单元："><a href="#控制单元：" class="headerlink" title="控制单元："></a>控制单元：</h4><p>​用于协调和控制其他组件的动作</p><h4 id="算术逻辑单"><a href="#算术逻辑单" class="headerlink" title="算术逻辑单:"></a>算术逻辑单:</h4><p>​用于完成运算</p><p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的指令越多。速度的计算单位是赫兹（Hz）</p><h1 id="IT定律之行业发展定律"><a href="#IT定律之行业发展定律" class="headerlink" title="IT定律之行业发展定律"></a>IT定律之行业发展定律</h1><h2 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h2><h2 id="安迪-比尔定律"><a href="#安迪-比尔定律" class="headerlink" title="安迪-比尔定律"></a>安迪-比尔定律</h2><h2 id="反摩尔定律"><a href="#反摩尔定律" class="headerlink" title="反摩尔定律"></a>反摩尔定律</h2><h1 id="计算机硬件硬件介绍-存储设备"><a href="#计算机硬件硬件介绍-存储设备" class="headerlink" title="计算机硬件硬件介绍-存储设备"></a>计算机硬件硬件介绍-存储设备</h1><p>​                  </p>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用DOS命令</title>
    <link href="/2022/06/25/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/25/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h1><p>​&gt;dir:列出当前目录下的文件及其文件夹</p><p>​&gt;md:创建目录</p><p>​&gt;rd:删除目录</p><p>​&gt;cd:进入指定目录</p><p>​&gt;cd..:退回到上一级目录</p><p>​&gt;cd:退回到根目录</p><p>​&gt;del:删除文件</p><p>​&gt;exit:退出dos命令行</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>Delete和Backspace:删除字符</p>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java注释</title>
    <link href="/2022/06/25/java%E6%B3%A8%E9%87%8A%EF%BC%9A/"/>
    <url>/2022/06/25/java%E6%B3%A8%E9%87%8A%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="java注释："><a href="#java注释：" class="headerlink" title="java注释："></a>java注释：</h1><h2 id="1、单行注释"><a href="#1、单行注释" class="headerlink" title="1、单行注释"></a>1、单行注释</h2><h2 id="2、多行注释"><a href="#2、多行注释" class="headerlink" title="2、多行注释"></a>2、多行注释</h2><p>不可以嵌套使用</p><p>可以加单行注释</p><h2 id="3、文档注释："><a href="#3、文档注释：" class="headerlink" title="3、文档注释："></a>3、文档注释：</h2><p>​注释内容可以被jdk提供的工具javadoc解析，生成一套以网页文件形式体现的该程序的说明文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">……</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">对第一个java程序进行总结</span><br><span class="hljs-comment">1.java程序编写-编译-运行的过程</span><br><span class="hljs-comment">编写：我们将编写的java代码保存再以&quot;.java&quot;结尾的源文件中</span><br><span class="hljs-comment">编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java</span><br><span class="hljs-comment">运行：使用java.exe命令解释运行我们的字节码文件。格式：java 类名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.</span><br><span class="hljs-comment">在一个java源文件中可以声明多个class。但是,只能最多有一个类声明为public</span><br><span class="hljs-comment">而且要求声明为public的类的类名必须与源文件名相同。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3.程序的入口是main()方法。格式是固定的。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4.输出语句：</span><br><span class="hljs-comment">System.out.println();//先输出后换行</span><br><span class="hljs-comment">System.out.print();只输出数据不换行 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">5.每一个执行语句都以一个&quot;;&quot;结束。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">6.编译的过程：</span><br><span class="hljs-comment">编译以后,会生成一个或多个字节码文件,字节码文件的文件名与jajva源文件中的类名相同。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">//arguments：参数</span><br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03--运算符</title>
    <link href="/2022/06/25/day03--%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/06/25/day03--%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><h2 id="2-4运算符"><a href="#2-4运算符" class="headerlink" title="2-4运算符"></a>2-4运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>b&#x3D;4，-b</td><td>-4</td></tr><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>&#x2F;</td><td>除</td><td>4&#x2F;2</td><td>2</td></tr><tr><td>%</td><td>取模</td><td>7%5</td><td>2</td></tr><tr><td>++</td><td></td><td>a&#x3D;2，a++</td><td>3</td></tr><tr><td>++</td><td></td><td>a&#x3D;2，++a</td><td>3</td></tr><tr><td>–</td><td></td><td></td><td></td></tr><tr><td>–</td><td></td><td></td><td></td></tr><tr><td>+</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之一：算术运算符</span><br><span class="hljs-comment">+ - + - * / % （前）++（后）++（前）--（后）-- +</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AriTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//除号：/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> num1 / num2;<br>System.out.println(result1);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> num1/ num2 * num2;<br>System.out.println(result2);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> num1 / num2;<br>System.out.println(result3);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> num1 * <span class="hljs-number">1.0</span> / num2;<br>System.out.println(result4);<br><br><span class="hljs-comment">//%：取余运算</span><br><span class="hljs-comment">//结果的符号与被模数的符号相同</span><br><span class="hljs-comment">//开发中，经常使用%来判断能否除尽的情况</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>System.out.println(<span class="hljs-string">&quot;m1 % n1 = &quot;</span> + m1 % n1);<br><br><span class="hljs-comment">//（前）++:先自增，后运算</span><br><span class="hljs-comment">//（后）++：先运算，后自增</span><br><span class="hljs-comment">//自增不会改变变量的数据类型</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> ++a1;<br>System.out.println(<span class="hljs-string">&quot;a1 = &quot;</span>+ a1 + <span class="hljs-string">&quot;,b1 = &quot;</span> + b1);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> a2++;<br>System.out.println(<span class="hljs-string">&quot;a2 = &quot;</span>+ a2 + <span class="hljs-string">&quot;,b2 = &quot;</span> + b2);<br><br><span class="hljs-comment">//（前）--:先自减一，后运算</span><br><span class="hljs-comment">//（后）--：先运算，后自减一</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>当”&#x3D;”两侧数据类型不一致的时候，可以使用自动类型转换或使用强制类型转换原则进行处理</p><p>扩展赋值运算符：+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之二：赋值运算符</span><br><span class="hljs-comment">= += -= *= /= %= //不会改变数据类型</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//赋值符号： =</span><br><span class="hljs-type">int</span> <span class="hljs-variable">j1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> i2,j2;<br><span class="hljs-comment">//连续赋值</span><br>i2 = j2 = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//**************************</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num1 +=<span class="hljs-number">2</span>;<br>System.out.println(num1);<span class="hljs-comment">//12</span><br><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//s1 = s1 + 2;//编译失败</span><br>s1 += <span class="hljs-number">2</span>;<span class="hljs-comment">//不会改变数据类型</span><br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20220623101016943.png" alt="image-20220623101016943"></p><p>比较运算的结果都是boolean型，也就是要么是true，要么是false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之三：比较运算符</span><br><span class="hljs-comment">== != &gt; &lt; &gt;= &lt;= instanceof</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(i == j);<br>System.out.println(i = j);<br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20220623101516987.png" alt="image-20220623101516987"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之四：逻辑运算符</span><br><span class="hljs-comment">&amp; &amp;&amp; | || ! ^</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">说明：</span><br><span class="hljs-comment">1.逻辑运算符操作的都是boolean类型的变量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">LogicTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//区分&amp; 和&amp;&amp;</span><br><span class="hljs-comment">//相同点，运算结果相同</span><br><span class="hljs-comment">//相同的2：当符号左边是true时，二者都会执行符号右边的运算</span><br><span class="hljs-comment">//不同点：当符号左边是false时，&amp;继续执行，&amp;&amp;不再执行右边运算</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>b1 = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(b1 &amp; (num1++ &gt; <span class="hljs-number">0</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在北京&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在南京&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;num1 = &quot;</span> + num1);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>b2 = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(b1 &amp;&amp; (num2++ &gt; <span class="hljs-number">0</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在北京&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在南京&quot;</span>);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;num2 = &quot;</span> + num2);<br><span class="hljs-comment">// 区分 | 与 || </span><br><span class="hljs-comment">//相同点，运算结果相同</span><br><span class="hljs-comment">//相同的2：当符号左边是false时，二者都会执行符号右边的运算</span><br><span class="hljs-comment">//不同点：当符号左边是true时，|继续执行，||不再执行右边运算</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(b3 | (num3++ &gt; <span class="hljs-number">0</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在北京&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在南京&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;num3 = &quot;</span> + num3);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b4</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(b4 || (num4++ &gt; <span class="hljs-number">0</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在北京&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我现在在南京&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;num4 = &quot;</span> + num4);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符是直接对整数的二进制的运算</p><p><img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20220623111103119.png" alt="image-20220623111103119"></p><p>左移运算和右移运算，二进制向左或者向右移动</p><p>每次向左移动一位，相当于变成原来的二倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之五：位运算符（了解）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">结论：</span><br><span class="hljs-comment">1. 位运算操作的都是整型变量</span><br><span class="hljs-comment">2. &lt;&lt; ：在一定范围内，每向左移一位：相当于 * 2</span><br><span class="hljs-comment">   &gt;&gt; : 在一定范围内，每向右移一位：相当于 / 2 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 面试题：最高效的计算2 * 8？ 2 &lt;&lt; 3 或 8 &lt;&lt; 1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BitTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">21</span>;<br>i = -<span class="hljs-number">21</span>;<br>System.out.println(<span class="hljs-string">&quot;i &lt;&lt; 2:&quot;</span> + (i &lt;&lt; <span class="hljs-number">2</span>));<br>System.out.println(<span class="hljs-string">&quot;i &lt;&lt; 27:&quot;</span> + (i &lt;&lt; <span class="hljs-number">27</span>));<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>System.out.println(<span class="hljs-string">&quot;m % n :&quot;</span> + (m &amp; n));<br>System.out.println(<span class="hljs-string">&quot;m | n :&quot;</span> + (m | n));<br>System.out.println(<span class="hljs-string">&quot;m ^ n :&quot;</span> + (m ^ n));<br><br><span class="hljs-comment">//练习： 交换两个变量的值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(<span class="hljs-string">&quot;num1 = &quot;</span> + num1 + <span class="hljs-string">&quot;, num2 = &quot;</span> + num2 );<br><br><span class="hljs-comment">//方式一：定义临时变量 </span><br><span class="hljs-comment">//int temp = num1;</span><br><span class="hljs-comment">//num1 = num2;</span><br><span class="hljs-comment">//num2 = temp;</span><br><span class="hljs-comment">//System.out.println(&quot;num1 = &quot; + num1 + &quot;, num2 = &quot; + num2 );</span><br><br><span class="hljs-comment">//方式二：好处：不用定义临时变量</span><br><span class="hljs-comment">//弊端：①相加操作可能超出存储范围②有局限性：只能适用于数值类型</span><br><span class="hljs-comment">//num1 = num1 + num2;</span><br><span class="hljs-comment">//num2 = num1 - num2;</span><br><span class="hljs-comment">//num1 = num1 - num2;</span><br><span class="hljs-comment">//System.out.println(&quot;num1 = &quot; + num1 + &quot;, num2 = &quot; + num2 );</span><br><br><span class="hljs-comment">//方法三：使用位运算符</span><br><span class="hljs-comment">//有局限性：只能使用于数值型</span><br>num1 = num1 ^ num2;<br>num2 = num1 ^ num2;<br>num1 = num1 ^ num2;<br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><p>​–&gt;(条件表达式)?表达式1:表达式2；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">运算符之六：三元运算符(三目运算符)</span><br><span class="hljs-comment">1.结构:(条件表达式)?表达式1:表达式2;</span><br><span class="hljs-comment">2.说明：</span><br><span class="hljs-comment">①条件表达式的结果位boolean类型</span><br><span class="hljs-comment">②根据条件表达式真或假，决定执行表达式1，还是表达式2，</span><br><span class="hljs-comment">如果表达式为true，执行表达式1</span><br><span class="hljs-comment">如果表达式为false，执行表达式2</span><br><span class="hljs-comment">③表达式1和表达式2要求</span><br><span class="hljs-comment">3.凡是可以使用三元运算符的地方都可以改写成 if……else</span><br><span class="hljs-comment">反之不成立</span><br><span class="hljs-comment">4.如果程序既可以用三元运算符，又可以使用if-else，那么优先选择三元运算符</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SanYuanTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//获取两个整数的较大值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt; n) ? m : n;<br>System.out.println(max);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (m &gt; <span class="hljs-number">2</span>) ? <span class="hljs-number">2</span> : <span class="hljs-number">1.0</span>; <br><br><span class="hljs-comment">//*******************************</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">maxStr</span> <span class="hljs-operator">=</span> (m &gt; n) ? <span class="hljs-string">&quot;m大&quot;</span> : <span class="hljs-string">&quot;n大&quot;</span>;<br>System.out.println(maxStr);<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>运算符有不同的优先级，所谓优先级就是表达式中运算符的运算顺序。如右表，上一行运算符总优先于下一行。</p><p>只有单目运算符、三元运算符、赋值运算符是从右往左运算的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03--程序流程控制</title>
    <link href="/2022/06/25/day03--%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/06/25/day03--%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><h2 id="2-5程序流程控制"><a href="#2-5程序流程控制" class="headerlink" title="2-5程序流程控制"></a>2-5程序流程控制</h2><p>流程程序控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块</p><p>起流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：</p><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>​程序从上到下顺序执行</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>​根据条件，选择性地执行某段代码；</p><p>​有if……else和switch……case</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分支结构中地if-else（条件判断结构）</span><br><span class="hljs-comment">三种结构</span><br><span class="hljs-comment">第一种：</span><br><span class="hljs-comment">if（条件表达式）&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">第二种：</span><br><span class="hljs-comment">if（条件表达式）&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;else&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">第三种：多选一</span><br><span class="hljs-comment">if（条件表达式）&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;else if（条件表达式）&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">……</span><br><span class="hljs-comment">else&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//举例1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">heartBeats</span> <span class="hljs-operator">=</span> <span class="hljs-number">79</span>;<br><span class="hljs-keyword">if</span>(heartBeats &lt; <span class="hljs-number">60</span> || heartBeats &gt; <span class="hljs-number">100</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;需要做进一步检查&quot;</span>);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;检查结束&quot;</span>);<br><br><span class="hljs-comment">//举例2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><span class="hljs-keyword">if</span>(age&lt;<span class="hljs-number">18</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;你可以看动画片&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;你可以看成人电影了&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//举例3</span><br><span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的数据非法&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">18</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;青少年时期&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">35</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;青壮年时期&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">60</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;中年时期&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">120</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;老年时期&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;你是要成仙啊&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02</title>
    <link href="/2022/06/25/day02/"/>
    <url>/2022/06/25/day02/</url>
    
    <content type="html"><![CDATA[<h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="1、关键字和保留字"><a href="#1、关键字和保留字" class="headerlink" title="1、关键字和保留字"></a>1、关键字和保留字</h2><p>定义：被java语言赋予了特殊含义，用做专门用途的字符串(单词)</p><p>特点：关键字中所有字母都为小写</p><p>java保留字:现有的java版本尚未使用，但以后版本可能会作为关键字使用</p><h2 id="2、标识符-Identifier"><a href="#2、标识符-Identifier" class="headerlink" title="2、标识符(Identifier)"></a>2、标识符(Identifier)</h2><p>java对各种变量、方法和类等要素命名时使用的字符序列称为标识符</p><p>技巧:凡是自己可以起名字的地方都叫标识符 </p><p>标识符的命名规则: –&gt;如果不遵守如下规则，编译不能通过<br>由26个英文字母大小写，0-9，或特殊符合组成<br>数字不能开头<br>不可以使用关键字保留字，但能包含关键字和保留字<br>java严格区分大小写，但长度无限制<br>标识符不能包含空格</p><p>命名规范：</p><p>包名：多单词组成时所有字母都小写：xxxyyyyzzz</p><p>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</p><p>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</p><p>常量名：所有字母都大写，多单词时每个单词都用下划线连接xxx_yyy_zzz</p><p>注意：</p><p>命名：“见名知意”</p><p>java采用unicode字符集，因此标识符也可以用汉字声明，但是不建议使用</p><h2 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h2><h3 id="变量的概念："><a href="#变量的概念：" class="headerlink" title="变量的概念："></a>变量的概念：</h3><p>​内存中一个存储区域</p><p>​该区域的数据可以在同一类范围内不断变化</p><p>​变量是程序中最基本的存储单元，包含变量类型、变量名和存储的值</p><h3 id="变量的作用："><a href="#变量的作用：" class="headerlink" title="变量的作用："></a>变量的作用：</h3><p>​用于在内存中保存数据</p><h3 id="使用变量注意："><a href="#使用变量注意：" class="headerlink" title="使用变量注意："></a>使用变量注意：</h3><p>​java中每个变量必须先声明，后使用</p><p>​使用变量名来访问这块区域的数据</p><p>​变量的作用域：其定义所在的一对{}内</p><p>​变量只有在其作用域内才有效</p><p>​同一个作用域内，不能定义重名的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">变量的使用</span><br><span class="hljs-comment">1.java定义变量的格式：数据类型 变量名 = 变量值;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.说明：</span><br><span class="hljs-comment">变量必须先声明，并且赋值，才能使用</span><br><span class="hljs-comment">变量都定义在其作用域内，在作用域内，它是有效的，换句话说出了作用域，就失效了</span><br><span class="hljs-comment">同一个作用域内，不可以声明两个同名的变量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">// 变量的定义</span><br><span class="hljs-type">int</span> <span class="hljs-variable">myAge</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><br><span class="hljs-comment">// 变量的使用</span><br>System.out.println(myAge);<br><br><span class="hljs-comment">//变量的声明</span><br><span class="hljs-type">int</span> myNumber;<br><br><span class="hljs-comment">//变量的赋值</span><br>myNumber = <span class="hljs-number">1001</span>;<br>System.out.println(myNumber);<br><span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//System.out.println(myClass);</span><br><br><span class="hljs-comment">//不可以在同一个作用域内定义同名变量</span><br><span class="hljs-comment">//int myAge = 22;</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">myClass</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="java定义的数据类型"><a href="#java定义的数据类型" class="headerlink" title="java定义的数据类型"></a>java定义的数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">java定义的数据类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">一、变量按照数据类型来分：</span><br><span class="hljs-comment">基本数据类型：</span><br><span class="hljs-comment">整形：byte(1字节 = 8bit) \ sort(2字节) \ int(4字节) \ long(8字节)</span><br><span class="hljs-comment">浮点型：float \ double</span><br><span class="hljs-comment">字符型：char</span><br><span class="hljs-comment">布尔型：boolean</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">引用数据类型：</span><br><span class="hljs-comment">类(class)</span><br><span class="hljs-comment">接口(interface)</span><br><span class="hljs-comment">数组(array)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">二、变量在类中声明的位置:</span><br><span class="hljs-comment">成员变量 vs 局部变量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//1.整形：byte(1字节 = 8bit) \ sort(2字节) \ int(4字节) \ long(8字节)</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>System.out.println(b1);<br>System.out.println(b2);<br><span class="hljs-comment">// 2 声明long型变量，必须以“l”或“L”结尾</span><br><span class="hljs-comment">//通常定义整形变量使用int型</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1287</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">32456431L</span>;<br>System.out.println(l1);<br><br><span class="hljs-comment">//浮点型：float(4个字节) \ double(8个字节)</span><br><span class="hljs-comment">//浮点型，表示带小数点的数据 </span><br><span class="hljs-comment">//float表示数值的范围比long还大</span><br><br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123.3</span>;<br>System.out.println(d1+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</span><br><span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3f</span>;<br>System.out.println(f1);<br><span class="hljs-comment">//通常，定义浮点型变量时，使用double型。</span><br><br><span class="hljs-comment">//字符型：char(1字符 = 2字节)</span><br><span class="hljs-comment">//定义char型变量，通常使用一对&#x27;&#x27;内部只能写一个字符</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br><span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//c1 = &#x27;AB&#x27;</span><br>System.out.println(c1);<br><br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中&#x27;</span>;<br>System.out.println(c2);<br>System.out.println(c3);<br><br><span class="hljs-comment">//表示方式：1.声明一个字符 2.转义字符 3.直接使用Unicode值来表示字符型常量</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//换行符</span><br>c5 = <span class="hljs-string">&#x27;\t&#x27;</span>;<br>System.out.print(<span class="hljs-string">&quot;hello&quot;</span> + c5);<br>System.out.println(<span class="hljs-string">&quot;world&quot;</span>);<br><br><span class="hljs-type">char</span> <span class="hljs-variable">c6</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\uu0043&#x27;</span>;<br>System.out.println(c6);<br><br><span class="hljs-comment">//布尔类型：boolean</span><br><span class="hljs-comment">// 只能取两个值</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>System.out.println(bb1);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isMarried</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(isMarried)&#123;<br>System.out.println(<span class="hljs-string">&quot;你就不能参加单身party！\\n 很遗憾！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;你可以多谈谈女朋友&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基本数据类型之间的运算规则："><a href="#基本数据类型之间的运算规则：" class="headerlink" title="基本数据类型之间的运算规则："></a>基本数据类型之间的运算规则：</h3><h4 id="自动类型提升："><a href="#自动类型提升：" class="headerlink" title="自动类型提升："></a>自动类型提升：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">基本数据类型之间的运算规则：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">前提：这里讨论的只是7钟数据类型变量间的运算，不包含boolean类型的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1.自动类型提升：</span><br><span class="hljs-comment">结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">byte 、 char 、 short --&gt;long --&gt; float --&gt; double</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">特别的：当byte、char、short三种类型的变量做运算时结果为int类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.强制类型转换：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> b1 + i1;<br>System.out.println(i2);<br><br><span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b1 + i1;<br>System.out.println(f);<br><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> s1;<br>System.out.println(d1);<br><br><span class="hljs-comment">//************************</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//97</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> c1 + i3;<br>System.out.println(i4);<br><br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//short s3 = c1 + s2;//编译不通过</span><br><br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> c1 + b2;<br><br><span class="hljs-comment">//************************</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="强制类型转换："><a href="#强制类型转换：" class="headerlink" title="强制类型转换："></a>强制类型转换：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">强制类型转换：自动类型提升运算的逆运算</span><br><span class="hljs-comment">1.需要使用强转符：()</span><br><span class="hljs-comment">2.注意点：强制类型转换，可能导致精度损失。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)d1;<span class="hljs-comment">//截断操作</span><br>System.out.println(i1);<br><br><span class="hljs-comment">//没有精度损失</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>)l1;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i2;<br>System.out.println(b);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="变量运算规则："><a href="#变量运算规则：" class="headerlink" title="变量运算规则："></a>变量运算规则：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//1.编码情况</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">12313</span>;<br>System.out.println(l);<br><span class="hljs-comment">//过大的整数</span><br><span class="hljs-comment">//long l1 = 1321564631315;</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1321564631315L</span>;<br><br><span class="hljs-comment">//******************</span><br><br><span class="hljs-comment">//编译失败</span><br><span class="hljs-comment">//float f1 = 12.3;</span><br><br><span class="hljs-comment">//2.编码情况2：</span><br><span class="hljs-comment">//整形常量，默认类型为int型</span><br><span class="hljs-comment">//浮点型常量，默认类型为double型</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-comment">//byte b1 = b + 1;//编译失败</span><br><br><span class="hljs-comment">//float f1 = b + 12.3;//编译失败</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字符串类型：String"><a href="#字符串类型：String" class="headerlink" title="字符串类型：String"></a>字符串类型：String</h3><p>String不是基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">String类型变量的使用</span><br><span class="hljs-comment">1.String属于引用数据类型,翻译为：字符串</span><br><span class="hljs-comment">2.声明String类型变量时，使用一对&quot;&quot;</span><br><span class="hljs-comment">3.String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</span><br><span class="hljs-comment">4.运算的结果仍然是String类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><br>System.out.println(s1);<br><span class="hljs-comment">//*********************</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">numberStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;学号&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> numberStr + number;<span class="hljs-comment">//&#x27;+&#x27;连接运算</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">info1</span> <span class="hljs-operator">=</span> info + b1;<br>System.out.println(info1);<br><br><span class="hljs-comment">//练习1</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//&#x27;a&#x27;97 A:65</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(c + num + str);<br>System.out.println(c + str + num);<br>System.out.println(c + (str + num));<br>System.out.println((c + str) + num);<br><br><span class="hljs-comment">//练习2</span><br><span class="hljs-comment">//**</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="进制与进制的转换"><a href="#进制与进制的转换" class="headerlink" title="进制与进制的转换"></a>进制与进制的转换</h3><p>​世界上有10种人，认识和不认识二进制的</p><h4 id="关于进制"><a href="#关于进制" class="headerlink" title="关于进制"></a>关于进制</h4><p>​所有数字在计算机都是二进制形式存在的。</p><p>​对于整数，有四种表示方式:</p><p>​二进制 0，1，满二进一，以0b或0B开头。</p><p>​十进制 </p><p>​八进制 0-7，满八进一，以数字0开头</p><p>​十六进制 0-9和A-F，满16进1，以0x或0X开头表示，此处的A-F不区分大小写。</p><p>​如：0x21AF + 1 &#x3D;0x21B0</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>1</th><th>1</th><th>0</th></tr></thead></table><p>0：正数</p><p>1：负数</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>1</th><th>1</th><th>1</th><th>0</th></tr></thead></table><table><thead><tr><th>1</th><th>0</th><th>0</th><th>0</th><th>1</th><th>1</th><th>1</th><th>0</th></tr></thead></table><p>-14的原码                                                         除了符号位，各个位取反</p><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th><th>0</th><th>0</th><th>0</th><th>1</th></tr></thead></table><p>-14的反码                                                        反码+1</p><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th><th>0</th><th>0</th><th>1</th><th>0</th></tr></thead></table><p>-14的补码</p><p>在计算机的底层都以补码的形式存储数据</p><p>十进制–&gt;二进制：除2取余的逆 </p><p>二进制–&gt;八进制：3个一位</p><p>二进制–&gt;十六进制：4个一位</p><h2 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h2><h2 id="5、程序流程控制"><a href="#5、程序流程控制" class="headerlink" title="5、程序流程控制"></a>5、程序流程控制</h2>]]></content>
    
    
    <categories>
      
      <category>JavaStudy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2022/06/25/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2hexo/"/>
    <url>/2022/06/25/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2hexo/</url>
    
    <content type="html"><![CDATA[<p>：</p><p>经过两天一夜的时间个人博客终于搭建出来了，这里是记录了一下踩坑的解决方案</p><h1 id="搭建个人博客hexo"><a href="#搭建个人博客hexo" class="headerlink" title="搭建个人博客hexo"></a>搭建个人博客hexo</h1><p>首先安装nodejs</p><p>window在终端下输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>切换成淘宝镜像源</p><h2 id="报错解决方案："><a href="#报错解决方案：" class="headerlink" title="报错解决方案："></a>报错解决方案：</h2><p>用管理员身份运行命令提示符</p><p><a href="https://blog.csdn.net/XiYoung_Miracle/article/details/102969346?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165604924416781483737237%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165604924416781483737237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-2-102969346-null-null.142%5Ev21%5Epc_rank_34,157%5Ev15%5Enew_3&utm_term=cnpm+%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F&spm=1018.2226.3001.4187">然后点击这里</a></p><p>之后再运行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装完成后可以用</p><p>在git bash里面输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure><p>来验证</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chdir<span class="hljs-regexp">//</span>看路径<br></code></pre></td></tr></table></figure><p>继续输入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-string">&#x27;https://github.com/hexojs/hexo-starter.git/&#x27;</span>: Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> github.com port <span class="hljs-number">443</span> <span class="hljs-keyword">after</span> <span class="hljs-number">21100</span> ms: Timed <span class="hljs-keyword">out</span><br>WARN  git clone failed. Copying data <span class="hljs-keyword">instead</span><br>FATAL &#123;<br>  err: [Error: EPERM: operation <span class="hljs-keyword">not</span> permitted, mkdir <span class="hljs-string">&#x27;D:\&#x27;</span>] &#123;<br>    errno: <span class="hljs-number">-4048</span>,<br>    code: <span class="hljs-string">&#x27;EPERM&#x27;</span>,<br>    syscall: <span class="hljs-string">&#x27;mkdir&#x27;</span>,<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;D:\\&#x27;</span><br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s http://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><p>搭个梯子就好了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo s<span class="hljs-regexp">//</span>启动命令<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo n <span class="hljs-string">&quot;我的第一篇博客文章&quot;</span><span class="hljs-regexp">//</span>生成 <br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<span class="hljs-regexp">//</span>清理<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo g<span class="hljs-regexp">//</span>生成<br></code></pre></td></tr></table></figure><p>有用的博客</p><p><a href="https://blog.csdn.net/weixin_44237337/article/details/119994618?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Failed%20to%20install%20dependencies&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-119994618.142%5Ev21%5Epc_rank_34,157%5Ev15%5Enew_3&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_44237337/article/details/119994618?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Failed%20to%20install%20dependencies&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-119994618.142^v21^pc_rank_34,157^v15^new_3&amp;spm=1018.2226.3001.4187</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/litten/</span>hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p>node -v#查看node版本<br>npm -v#查看npm版本<br>npm install -g cnpm –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>#安装淘宝的cnpm 管理器<br>cnpm -v#查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v#查看hexo版本<br>mkdir blog#创建blog目录<br>cd blog #进入blog目录<br>sudo hexo init #生成博客 初始化博客<br>hexo s#启动本地博客服务<br><a href="http://localhost:4000/">http://localhost:4000/</a>#本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章<br>#返回blog目录<br>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>-—<br>#配置_config.yml<br>-—-<br>    # Deployment<br>    ## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a><br>​deploy:<br>          type: git<br>         repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>          branch: master<br>-—-<br>hexo d#部署到Github仓库里<br><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  #访问这个地址可以查看博客</p><p> git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes&#x2F;yilia  #下载yilia主题到本地</p><p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><p>hexo c#清理一下<br>hexo g#生成<br>hexo d#部署到远程Github仓库<br><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  #查看博客</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/chenzengguang520/</span>chenzengguang520.github.io.git<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>chenzengguang520.github.io/<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/litten/</span>hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
